{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5","program":"/Users/jacobfeldman/.rustup/toolchains/stable-x86_64-apple-darwin/bin/rls","arguments":["--crate-name","regex","/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","debuginfo=2","--cfg","feature=\"std\"","-C","metadata=bfdf964ea2fc4e41","-C","extra-filename=-bfdf964ea2fc4e41","--out-dir","/Users/jacobfeldman/Documents/Rust-Wasm-Js/target/rls/debug/deps","-L","dependency=/Users/jacobfeldman/Documents/Rust-Wasm-Js/target/rls/debug/deps","--extern","regex_syntax=/Users/jacobfeldman/Documents/Rust-Wasm-Js/target/rls/debug/deps/libregex_syntax-3f70e90f6763fece.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/Users/jacobfeldman/.rustup/toolchains/stable-x86_64-apple-darwin"],"output":"/Users/jacobfeldman/Documents/Rust-Wasm-Js/target/rls/debug/deps/libregex-bfdf964ea2fc4e41.rmeta"},"prelude":{"crate_id":{"name":"regex","disambiguator":[2886270375500172520,2406777075211661227]},"crate_root":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src","external_crates":[{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[5808000563841838002,6875932327897409807]}},{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[5459908120384850477,15760959269387734159]}},{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[11826469219384905814,12486183027959381912]}},{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[5497990426549684121,15109235050116755313]}},{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[9495953968349266340,8510226981626586408]}},{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[423181384897816611,2293857470463835221]}},{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[5608331764705855408,15392280463108098182]}},{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[14701876030349379005,4369912422515260820]}},{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/lib.rs","num":9,"id":{"name":"backtrace","disambiguator":[8984243875435576741,4446548522921354]}},{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/lib.rs","num":10,"id":{"name":"rustc_demangle","disambiguator":[4101421024496600006,15821692231896539213]}},{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/lib.rs","num":11,"id":{"name":"backtrace_sys","disambiguator":[3079379191059796654,13101802771042696873]}},{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/lib.rs","num":12,"id":{"name":"hashbrown","disambiguator":[7173097494859913114,11426318732171342333]}},{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/lib.rs","num":13,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[12351377766094969309,8390201886823579403]}},{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/lib.rs","num":14,"id":{"name":"panic_unwind","disambiguator":[2739304812783641882,6504751215723634061]}},{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/lib.rs","num":15,"id":{"name":"regex_syntax","disambiguator":[8997585527008492250,11815103120954438943]}}],"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/lib.rs","byte_start":0,"byte_end":28598,"line_start":1,"line_end":785,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":1267},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/lib.rs","byte_start":23823,"byte_end":23828,"line_start":639,"line_end":639,"column_start":16,"column_end":21},"alias_span":null,"name":"Error","value":"","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/lib.rs","byte_start":23887,"byte_end":23888,"line_start":641,"line_end":641,"column_start":34,"column_end":35},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/lib.rs","byte_start":23887,"byte_end":23888,"line_start":641,"line_end":641,"column_start":34,"column_end":35},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/lib.rs","byte_start":23887,"byte_end":23888,"line_start":641,"line_end":641,"column_start":34,"column_end":35},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":862},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/lib.rs","byte_start":24072,"byte_end":24078,"line_start":649,"line_end":649,"column_start":5,"column_end":11},"alias_span":null,"name":"escape","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1934},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/lib.rs","byte_start":24080,"byte_end":24096,"line_start":649,"line_end":649,"column_start":13,"column_end":29},"alias_span":null,"name":"CaptureLocations","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1025},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/lib.rs","byte_start":24098,"byte_end":24112,"line_start":649,"line_end":649,"column_start":31,"column_end":45},"alias_span":null,"name":"CaptureMatches","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":934},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/lib.rs","byte_start":24114,"byte_end":24126,"line_start":649,"line_end":649,"column_start":47,"column_end":59},"alias_span":null,"name":"CaptureNames","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":970},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/lib.rs","byte_start":24128,"byte_end":24136,"line_start":649,"line_end":649,"column_start":61,"column_end":69},"alias_span":null,"name":"Captures","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":965},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/lib.rs","byte_start":24142,"byte_end":24151,"line_start":650,"line_end":650,"column_start":5,"column_end":14},"alias_span":null,"name":"Locations","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1905},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/lib.rs","byte_start":24153,"byte_end":24158,"line_start":650,"line_end":650,"column_start":16,"column_end":21},"alias_span":null,"name":"Match","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1036},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/lib.rs","byte_start":24160,"byte_end":24167,"line_start":650,"line_end":650,"column_start":23,"column_end":30},"alias_span":null,"name":"Matches","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1066},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/lib.rs","byte_start":24169,"byte_end":24177,"line_start":650,"line_end":650,"column_start":32,"column_end":40},"alias_span":null,"name":"NoExpand","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1929},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/lib.rs","byte_start":24179,"byte_end":24184,"line_start":650,"line_end":650,"column_start":42,"column_end":47},"alias_span":null,"name":"Regex","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1047},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/lib.rs","byte_start":24186,"byte_end":24194,"line_start":650,"line_end":650,"column_start":49,"column_end":57},"alias_span":null,"name":"Replacer","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1941},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/lib.rs","byte_start":24196,"byte_end":24207,"line_start":650,"line_end":650,"column_start":59,"column_end":70},"alias_span":null,"name":"ReplacerRef","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":945},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/lib.rs","byte_start":24209,"byte_end":24214,"line_start":650,"line_end":650,"column_start":72,"column_end":77},"alias_span":null,"name":"Split","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":955},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/lib.rs","byte_start":24220,"byte_end":24226,"line_start":651,"line_end":651,"column_start":5,"column_end":11},"alias_span":null,"name":"SplitN","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1013},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/lib.rs","byte_start":24228,"byte_end":24245,"line_start":651,"line_end":651,"column_start":13,"column_end":30},"alias_span":null,"name":"SubCaptureMatches","value":"","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/lib.rs","byte_start":23887,"byte_end":23888,"line_start":641,"line_end":641,"column_start":34,"column_end":35},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":24}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/lib.rs","byte_start":23887,"byte_end":23888,"line_start":641,"line_end":641,"column_start":34,"column_end":35},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":24}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/lib.rs","byte_start":23887,"byte_end":23888,"line_start":641,"line_end":641,"column_start":34,"column_end":35},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":24}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/lib.rs","byte_start":23887,"byte_end":23888,"line_start":641,"line_end":641,"column_start":34,"column_end":35},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":24}},{"kind":"Use","ref_id":{"krate":0,"index":106},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/lib.rs","byte_start":28398,"byte_end":28406,"line_start":780,"line_end":780,"column_start":22,"column_end":30},"alias_span":null,"name":"Compiler","value":"","parent":{"krate":0,"index":1106}},{"kind":"Use","ref_id":{"krate":0,"index":237},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/lib.rs","byte_start":28427,"byte_end":28431,"line_start":781,"line_end":781,"column_start":20,"column_end":24},"alias_span":null,"name":"Exec","value":"","parent":{"krate":0,"index":1106}},{"kind":"Use","ref_id":{"krate":0,"index":244},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/lib.rs","byte_start":28433,"byte_end":28444,"line_start":781,"line_end":781,"column_start":26,"column_end":37},"alias_span":null,"name":"ExecBuilder","value":"","parent":{"krate":0,"index":1106}},{"kind":"Use","ref_id":{"krate":0,"index":1416},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/lib.rs","byte_start":28467,"byte_end":28471,"line_start":782,"line_end":782,"column_start":21,"column_end":25},"alias_span":null,"name":"Char","value":"","parent":{"krate":0,"index":1106}},{"kind":"Use","ref_id":{"krate":0,"index":1392},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/lib.rs","byte_start":28473,"byte_end":28482,"line_start":782,"line_end":782,"column_start":27,"column_end":36},"alias_span":null,"name":"CharInput","value":"","parent":{"krate":0,"index":1106}},{"kind":"Use","ref_id":{"krate":0,"index":378},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/lib.rs","byte_start":28484,"byte_end":28489,"line_start":782,"line_end":782,"column_start":38,"column_end":43},"alias_span":null,"name":"Input","value":"","parent":{"krate":0,"index":1106}},{"kind":"Use","ref_id":{"krate":0,"index":1382},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/lib.rs","byte_start":28491,"byte_end":28498,"line_start":782,"line_end":782,"column_start":45,"column_end":52},"alias_span":null,"name":"InputAt","value":"","parent":{"krate":0,"index":1106}},{"kind":"Use","ref_id":{"krate":0,"index":1440},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/lib.rs","byte_start":28522,"byte_end":28537,"line_start":783,"line_end":783,"column_start":22,"column_end":37},"alias_span":null,"name":"LiteralSearcher","value":"","parent":{"krate":0,"index":1106}},{"kind":"Use","ref_id":{"krate":0,"index":1549},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/lib.rs","byte_start":28558,"byte_end":28567,"line_start":784,"line_end":784,"column_start":20,"column_end":29},"alias_span":null,"name":"EmptyLook","value":"","parent":{"krate":0,"index":1106}},{"kind":"Use","ref_id":{"krate":0,"index":1502},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/lib.rs","byte_start":28569,"byte_end":28573,"line_start":784,"line_end":784,"column_start":31,"column_end":35},"alias_span":null,"name":"Inst","value":"","parent":{"krate":0,"index":1106}},{"kind":"Use","ref_id":{"krate":0,"index":1584},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/lib.rs","byte_start":28575,"byte_end":28585,"line_start":784,"line_end":784,"column_start":37,"column_end":47},"alias_span":null,"name":"InstRanges","value":"","parent":{"krate":0,"index":1106}},{"kind":"Use","ref_id":{"krate":0,"index":1484},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/lib.rs","byte_start":28587,"byte_end":28594,"line_start":784,"line_end":784,"column_start":49,"column_end":56},"alias_span":null,"name":"Program","value":"","parent":{"krate":0,"index":1106}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/lib.rs","byte_start":0,"byte_end":28598,"line_start":1,"line_end":785,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":6},{"krate":0,"index":7},{"krate":0,"index":8},{"krate":0,"index":24},{"krate":0,"index":29},{"krate":0,"index":58},{"krate":0,"index":80},{"krate":0,"index":200},{"krate":0,"index":209},{"krate":0,"index":331},{"krate":0,"index":353},{"krate":0,"index":357},{"krate":0,"index":458},{"krate":0,"index":473},{"krate":0,"index":501},{"krate":0,"index":544},{"krate":0,"index":549},{"krate":0,"index":781},{"krate":0,"index":783},{"krate":0,"index":841},{"krate":0,"index":1074},{"krate":0,"index":1093},{"krate":0,"index":1106}],"decl_id":null,"docs":"This crate provides a library for parsing, compiling, and executing regular\nexpressions. Its syntax is similar to Perl-style regular expressions, but lacks\na few features like look around and backreferences. In exchange, all searches\nexecute in linear time with respect to the size of the regular expression and\nsearch text.","sig":null,"attributes":[{"value":"deny(missing_docs)","span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/lib.rs","byte_start":23179,"byte_end":23201,"line_start":615,"line_end":615,"column_start":1,"column_end":23}}]},{"kind":"Mod","id":{"krate":0,"index":24},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/lib.rs","byte_start":27668,"byte_end":27673,"line_start":742,"line_end":742,"column_start":9,"column_end":14},"name":"bytes","qualname":"::bytes","value":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/lib.rs","parent":null,"children":[{"krate":0,"index":25},{"krate":0,"index":26},{"krate":0,"index":27},{"krate":0,"index":28}],"decl_id":null,"docs":"Match regular expressions on arbitrary bytes.","sig":null,"attributes":[{"value":"cfg(feature = \"std\")","span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/lib.rs","byte_start":27636,"byte_end":27659,"line_start":741,"line_end":741,"column_start":1,"column_end":24}}]},{"kind":"Struct","id":{"krate":0,"index":106},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/compile.rs","byte_start":42993,"byte_end":43001,"line_start":27,"line_end":27,"column_start":12,"column_end":20},"name":"Compiler","qualname":"::compile::Compiler","value":"Compiler {  }","parent":null,"children":[{"krate":0,"index":107},{"krate":0,"index":108},{"krate":0,"index":109},{"krate":0,"index":110},{"krate":0,"index":111},{"krate":0,"index":112},{"krate":0,"index":113},{"krate":0,"index":114}],"decl_id":null,"docs":" A compiler translates a regular expression AST to a sequence of\n instructions. The sequence of instructions represents an NFA.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":116},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/compile.rs","byte_start":43412,"byte_end":43415,"line_start":42,"line_end":42,"column_start":12,"column_end":15},"name":"new","qualname":"<Compiler>::new","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new regular expression compiler.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":117},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/compile.rs","byte_start":44010,"byte_end":44020,"line_start":58,"line_end":58,"column_start":12,"column_end":22},"name":"size_limit","qualname":"<Compiler>::size_limit","value":"fn (mut self, size_limit: usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" The size of the resulting program is limited by size_limit. If\n the program approximately exceeds the given size (in bytes), then\n compilation will stop and return an error.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":118},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/compile.rs","byte_start":44765,"byte_end":44770,"line_start":74,"line_end":74,"column_start":12,"column_end":17},"name":"bytes","qualname":"<Compiler>::bytes","value":"fn (mut self, yes: bool) -> Self","parent":null,"children":[],"decl_id":null,"docs":" If bytes is true, then the program is compiled as a byte based\n automaton, which incorporates UTF-8 decoding into the machine. If it's\n false, then the automaton is Unicode scalar value based, e.g., an\n engine utilizing such an automaton is responsible for UTF-8 decoding.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":119},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/compile.rs","byte_start":45053,"byte_end":45062,"line_start":83,"line_end":83,"column_start":12,"column_end":21},"name":"only_utf8","qualname":"<Compiler>::only_utf8","value":"fn (mut self, yes: bool) -> Self","parent":null,"children":[],"decl_id":null,"docs":" When disabled, the program compiled may match arbitrary bytes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":120},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/compile.rs","byte_start":45545,"byte_end":45548,"line_start":95,"line_end":95,"column_start":12,"column_end":15},"name":"dfa","qualname":"<Compiler>::dfa","value":"fn (mut self, yes: bool) -> Self","parent":null,"children":[],"decl_id":null,"docs":" When set, the machine returned is suitable for use in the DFA matching\n engine.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":121},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/compile.rs","byte_start":45783,"byte_end":45790,"line_start":102,"line_end":102,"column_start":12,"column_end":19},"name":"reverse","qualname":"<Compiler>::reverse","value":"fn (mut self, yes: bool) -> Self","parent":null,"children":[],"decl_id":null,"docs":" When set, the machine returned is suitable for matching text in\n reverse. In particular, all concatenations are flipped.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":122},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/compile.rs","byte_start":46144,"byte_end":46151,"line_start":112,"line_end":112,"column_start":12,"column_end":19},"name":"compile","qualname":"<Compiler>::compile","value":"fn (mut self, exprs: &[Hir]) -> result::Result<Program, Error>","parent":null,"children":[],"decl_id":null,"docs":" Compile a regular expression given its AST.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1268},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/error.rs","byte_start":82662,"byte_end":82668,"line_start":8,"line_end":8,"column_start":5,"column_end":11},"name":"Syntax","qualname":"::error::Error::Syntax","value":"Error::Syntax(String)","parent":{"krate":0,"index":1267},"children":[],"decl_id":null,"docs":" A syntax error.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1271},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/error.rs","byte_start":82788,"byte_end":82802,"line_start":11,"line_end":11,"column_start":5,"column_end":19},"name":"CompiledTooBig","qualname":"::error::Error::CompiledTooBig","value":"Error::CompiledTooBig(usize)","parent":{"krate":0,"index":1267},"children":[],"decl_id":null,"docs":" The compiled program exceeded the set size limit.\n The argument is the size limit imposed.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1274},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/error.rs","byte_start":83089,"byte_end":83104,"line_start":18,"line_end":18,"column_start":5,"column_end":20},"name":"__Nonexhaustive","qualname":"::error::Error::__Nonexhaustive","value":"Error::__Nonexhaustive","parent":{"krate":0,"index":1267},"children":[],"decl_id":null,"docs":" Hints that destructuring should not be exhaustive.","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":1267},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/error.rs","byte_start":82626,"byte_end":82631,"line_start":6,"line_end":6,"column_start":10,"column_end":15},"name":"Error","qualname":"::error::Error","value":"Error::{Syntax, CompiledTooBig, __Nonexhaustive}","parent":null,"children":[{"krate":0,"index":1268},{"krate":0,"index":1271},{"krate":0,"index":1274}],"decl_id":null,"docs":" An error that occurred during parsing or compiling a regular expression.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":237},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/exec.rs","byte_start":85743,"byte_end":85747,"line_start":33,"line_end":33,"column_start":12,"column_end":16},"name":"Exec","qualname":"::exec::Exec","value":"Exec {  }","parent":null,"children":[{"krate":0,"index":238},{"krate":0,"index":239}],"decl_id":null,"docs":" `Exec` manages the execution of a regular expression.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1282},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/exec.rs","byte_start":86107,"byte_end":86117,"line_start":44,"line_end":44,"column_start":12,"column_end":22},"name":"ExecNoSync","qualname":"::exec::ExecNoSync","value":"ExecNoSync {  }","parent":null,"children":[{"krate":0,"index":1284},{"krate":0,"index":1285}],"decl_id":null,"docs":" `ExecNoSync` is like `Exec`, except it embeds a reference to a cache. This\n means it is no longer Sync, but we can now avoid the overhead of\n synchronization to fetch the cache.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":240},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/exec.rs","byte_start":86369,"byte_end":86382,"line_start":52,"line_end":52,"column_start":12,"column_end":25},"name":"ExecNoSyncStr","qualname":"::exec::ExecNoSyncStr","value":"","parent":null,"children":[],"decl_id":null,"docs":" `ExecNoSyncStr` is like `ExecNoSync`, but matches on &str instead of &[u8].\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":244},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/exec.rs","byte_start":88656,"byte_end":88667,"line_start":100,"line_end":100,"column_start":12,"column_end":23},"name":"ExecBuilder","qualname":"::exec::ExecBuilder","value":"ExecBuilder {  }","parent":null,"children":[{"krate":0,"index":245},{"krate":0,"index":246},{"krate":0,"index":247},{"krate":0,"index":248}],"decl_id":null,"docs":" Facilitates the construction of an executor by exposing various knobs\n to control how a regex is executed and what kinds of resources it's\n permitted to use.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":255},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/exec.rs","byte_start":89268,"byte_end":89271,"line_start":122,"line_end":122,"column_start":12,"column_end":15},"name":"new","qualname":"<ExecBuilder>::new","value":"fn (re: &str) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a regex execution builder.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":256},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/exec.rs","byte_start":89597,"byte_end":89605,"line_start":131,"line_end":131,"column_start":12,"column_end":20},"name":"new_many","qualname":"<ExecBuilder>::new_many","value":"fn <I, S> (res: I) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Like new, but compiles the union of the given regular expressions.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":260},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/exec.rs","byte_start":89920,"byte_end":89931,"line_start":142,"line_end":142,"column_start":12,"column_end":23},"name":"new_options","qualname":"<ExecBuilder>::new_options","value":"fn (opts: RegexOptions) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a regex execution builder.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":261},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/exec.rs","byte_start":90429,"byte_end":90438,"line_start":158,"line_end":158,"column_start":12,"column_end":21},"name":"automatic","qualname":"<ExecBuilder>::automatic","value":"fn (mut self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Set the matching engine to be automatically determined.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":262},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/exec.rs","byte_start":90753,"byte_end":90756,"line_start":168,"line_end":168,"column_start":12,"column_end":15},"name":"nfa","qualname":"<ExecBuilder>::nfa","value":"fn (mut self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Sets the matching engine to use the NFA algorithm no matter what\n optimizations are possible.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":263},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/exec.rs","byte_start":91247,"byte_end":91267,"line_start":181,"line_end":181,"column_start":12,"column_end":32},"name":"bounded_backtracking","qualname":"<ExecBuilder>::bounded_backtracking","value":"fn (mut self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Sets the matching engine to use a bounded backtracking engine no\n matter what optimizations are possible.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":264},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/exec.rs","byte_start":91835,"byte_end":91840,"line_start":195,"line_end":195,"column_start":12,"column_end":17},"name":"bytes","qualname":"<ExecBuilder>::bytes","value":"fn (mut self, yes: bool) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Compiles byte based programs for use with the NFA matching engines.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":265},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/exec.rs","byte_start":92111,"byte_end":92120,"line_start":204,"line_end":204,"column_start":12,"column_end":21},"name":"only_utf8","qualname":"<ExecBuilder>::only_utf8","value":"fn (mut self, yes: bool) -> Self","parent":null,"children":[],"decl_id":null,"docs":" When disabled, the program compiled may match arbitrary bytes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":266},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/exec.rs","byte_start":92243,"byte_end":92250,"line_start":210,"line_end":210,"column_start":12,"column_end":19},"name":"unicode","qualname":"<ExecBuilder>::unicode","value":"fn (mut self, yes: bool) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Set the Unicode flag.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":271},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/exec.rs","byte_start":95475,"byte_end":95480,"line_start":286,"line_end":286,"column_start":12,"column_end":17},"name":"build","qualname":"<ExecBuilder>::build","value":"fn (self) -> Result<Exec, Error>","parent":null,"children":[],"decl_id":null,"docs":" Build an executor that can run a regular expression.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":301},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/exec.rs","byte_start":124385,"byte_end":124400,"line_start":1138,"line_end":1138,"column_start":12,"column_end":27},"name":"many_matches_at","qualname":"<ExecNoSync>::many_matches_at","value":"fn (&self, matches: &mut [bool], text: &[u8], start: usize) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Finds which regular expressions match the given text.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":305},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/exec.rs","byte_start":127507,"byte_end":127523,"line_start":1237,"line_end":1237,"column_start":12,"column_end":28},"name":"capture_name_idx","qualname":"<ExecNoSync>::capture_name_idx","value":"fn (&self) -> &Arc<HashMap<String, usize>>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":308},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/exec.rs","byte_start":127652,"byte_end":127668,"line_start":1243,"line_end":1243,"column_start":12,"column_end":28},"name":"capture_name_idx","qualname":"<ExecNoSyncStr>::capture_name_idx","value":"fn (&self) -> &Arc<HashMap<String, usize>>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":310},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/exec.rs","byte_start":127873,"byte_end":127881,"line_start":1251,"line_end":1251,"column_start":12,"column_end":20},"name":"searcher","qualname":"<Exec>::searcher","value":"fn (&self) -> ExecNoSync","parent":null,"children":[],"decl_id":null,"docs":" Get a searcher that isn't Sync.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":312},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/exec.rs","byte_start":128268,"byte_end":128280,"line_start":1261,"line_end":1261,"column_start":12,"column_end":24},"name":"searcher_str","qualname":"<Exec>::searcher_str","value":"fn (&self) -> ExecNoSyncStr","parent":null,"children":[],"decl_id":null,"docs":" Get a searcher that isn't Sync and can match on &str.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":313},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/exec.rs","byte_start":128406,"byte_end":128416,"line_start":1266,"line_end":1266,"column_start":12,"column_end":22},"name":"into_regex","qualname":"<Exec>::into_regex","value":"fn (self) -> re_unicode::Regex","parent":null,"children":[],"decl_id":null,"docs":" Build a Regex from this executor.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":314},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/exec.rs","byte_start":128547,"byte_end":128561,"line_start":1271,"line_end":1271,"column_start":12,"column_end":26},"name":"into_regex_set","qualname":"<Exec>::into_regex_set","value":"fn (self) -> re_set::unicode::RegexSet","parent":null,"children":[],"decl_id":null,"docs":" Build a RegexSet from this executor.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":315},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/exec.rs","byte_start":128736,"byte_end":128751,"line_start":1276,"line_end":1276,"column_start":12,"column_end":27},"name":"into_byte_regex","qualname":"<Exec>::into_byte_regex","value":"fn (self) -> re_bytes::Regex","parent":null,"children":[],"decl_id":null,"docs":" Build a Regex from this executor that can match arbitrary bytes.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":316},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/exec.rs","byte_start":128909,"byte_end":128928,"line_start":1281,"line_end":1281,"column_start":12,"column_end":31},"name":"into_byte_regex_set","qualname":"<Exec>::into_byte_regex_set","value":"fn (self) -> re_set::bytes::RegexSet","parent":null,"children":[],"decl_id":null,"docs":" Build a RegexSet from this executor that can match arbitrary bytes.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":317},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/exec.rs","byte_start":129115,"byte_end":129128,"line_start":1287,"line_end":1287,"column_start":12,"column_end":25},"name":"regex_strings","qualname":"<Exec>::regex_strings","value":"fn (&self) -> &[String]","parent":null,"children":[],"decl_id":null,"docs":" The original regular expressions given by the caller that were\n compiled.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":318},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/exec.rs","byte_start":129285,"byte_end":129298,"line_start":1294,"line_end":1294,"column_start":12,"column_end":25},"name":"capture_names","qualname":"<Exec>::capture_names","value":"fn (&self) -> &[Option<String>]","parent":null,"children":[],"decl_id":null,"docs":" Return a slice of capture names.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":319},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/exec.rs","byte_start":129473,"byte_end":129489,"line_start":1300,"line_end":1300,"column_start":12,"column_end":28},"name":"capture_name_idx","qualname":"<Exec>::capture_name_idx","value":"fn (&self) -> &Arc<HashMap<String, usize>>","parent":null,"children":[],"decl_id":null,"docs":" Return a reference to named groups mapping (from group name to\n group position).\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1382},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/input.rs","byte_start":148145,"byte_end":148152,"line_start":15,"line_end":15,"column_start":12,"column_end":19},"name":"InputAt","qualname":"::input::InputAt","value":"InputAt {  }","parent":null,"children":[{"krate":0,"index":1383},{"krate":0,"index":1384},{"krate":0,"index":1385},{"krate":0,"index":1386}],"decl_id":null,"docs":" Represents a location in the input.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":370},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/input.rs","byte_start":148324,"byte_end":148332,"line_start":24,"line_end":24,"column_start":12,"column_end":20},"name":"is_start","qualname":"<InputAt>::is_start","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true iff this position is at the beginning of the input.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":371},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/input.rs","byte_start":148459,"byte_end":148465,"line_start":29,"line_end":29,"column_start":12,"column_end":18},"name":"is_end","qualname":"<InputAt>::is_end","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true iff this position is past the end of the input.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":372},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/input.rs","byte_start":148711,"byte_end":148715,"line_start":37,"line_end":37,"column_start":12,"column_end":16},"name":"char","qualname":"<InputAt>::char","value":"fn (&self) -> Char","parent":null,"children":[],"decl_id":null,"docs":" Returns the character at this position.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":373},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/input.rs","byte_start":148809,"byte_end":148813,"line_start":42,"line_end":42,"column_start":12,"column_end":16},"name":"byte","qualname":"<InputAt>::byte","value":"fn (&self) -> Option<u8>","parent":null,"children":[],"decl_id":null,"docs":" Returns the byte at this position.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":374},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/input.rs","byte_start":148940,"byte_end":148943,"line_start":47,"line_end":47,"column_start":12,"column_end":15},"name":"len","qualname":"<InputAt>::len","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the UTF-8 width of the character at this position.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":375},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/input.rs","byte_start":149088,"byte_end":149096,"line_start":53,"line_end":53,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<InputAt>::is_empty","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns whether the UTF-8 width of the character at this position\n is zero.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":376},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/input.rs","byte_start":149204,"byte_end":149207,"line_start":58,"line_end":58,"column_start":12,"column_end":15},"name":"pos","qualname":"<InputAt>::pos","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the byte offset of this position.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":377},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/input.rs","byte_start":149328,"byte_end":149336,"line_start":63,"line_end":63,"column_start":12,"column_end":20},"name":"next_pos","qualname":"<InputAt>::next_pos","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the byte offset of the next position in the input.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":378},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/input.rs","byte_start":149462,"byte_end":149467,"line_start":69,"line_end":69,"column_start":11,"column_end":16},"name":"Input","qualname":"::input::Input","value":"Input: fmt::Debug","parent":null,"children":[{"krate":0,"index":379},{"krate":0,"index":380},{"krate":0,"index":381},{"krate":0,"index":382},{"krate":0,"index":383},{"krate":0,"index":384},{"krate":0,"index":385},{"krate":0,"index":386}],"decl_id":null,"docs":" An abstraction over input used in the matching engines.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":379},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/input.rs","byte_start":149552,"byte_end":149554,"line_start":71,"line_end":71,"column_start":8,"column_end":10},"name":"at","qualname":"::input::Input::at","value":"fn (&self, i: usize) -> InputAt","parent":{"krate":0,"index":378},"children":[],"decl_id":null,"docs":" Return an encoding of the position at byte offset `i`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":380},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/input.rs","byte_start":149731,"byte_end":149740,"line_start":76,"line_end":76,"column_start":8,"column_end":17},"name":"next_char","qualname":"::input::Input::next_char","value":"fn (&self, at: InputAt) -> Char","parent":{"krate":0,"index":378},"children":[],"decl_id":null,"docs":" Return the Unicode character occurring next to `at`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":381},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/input.rs","byte_start":149921,"byte_end":149934,"line_start":81,"line_end":81,"column_start":8,"column_end":21},"name":"previous_char","qualname":"::input::Input::previous_char","value":"fn (&self, at: InputAt) -> Char","parent":{"krate":0,"index":378},"children":[],"decl_id":null,"docs":" Return the Unicode character occurring previous to `at`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":382},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/input.rs","byte_start":150074,"byte_end":150088,"line_start":85,"line_end":85,"column_start":8,"column_end":22},"name":"is_empty_match","qualname":"::input::Input::is_empty_match","value":"fn (&self, at: InputAt, empty: &InstEmptyLook) -> bool","parent":{"krate":0,"index":378},"children":[],"decl_id":null,"docs":" Return true if the given empty width instruction matches at the\n input position given.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":383},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/input.rs","byte_start":150195,"byte_end":150204,"line_start":88,"line_end":88,"column_start":8,"column_end":17},"name":"prefix_at","qualname":"::input::Input::prefix_at","value":"fn (&self, prefixes: &LiteralSearcher, at: InputAt) -> Option<InputAt>","parent":{"krate":0,"index":378},"children":[],"decl_id":null,"docs":" Scan the input for a matching prefix.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":384},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/input.rs","byte_start":150354,"byte_end":150357,"line_start":95,"line_end":95,"column_start":8,"column_end":11},"name":"len","qualname":"::input::Input::len","value":"fn (&self) -> usize","parent":{"krate":0,"index":378},"children":[],"decl_id":null,"docs":" The number of bytes in the input.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":385},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/input.rs","byte_start":150419,"byte_end":150427,"line_start":98,"line_end":98,"column_start":8,"column_end":16},"name":"is_empty","qualname":"::input::Input::is_empty","value":"fn (&self) -> bool","parent":{"krate":0,"index":378},"children":[],"decl_id":null,"docs":" Whether the input is empty.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":386},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/input.rs","byte_start":150538,"byte_end":150546,"line_start":103,"line_end":103,"column_start":8,"column_end":16},"name":"as_bytes","qualname":"::input::Input::as_bytes","value":"fn (&self) -> &[u8]","parent":{"krate":0,"index":378},"children":[],"decl_id":null,"docs":" Return the given input as a sequence of bytes.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1392},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/input.rs","byte_start":151350,"byte_end":151359,"line_start":142,"line_end":142,"column_start":12,"column_end":21},"name":"CharInput","qualname":"::input::CharInput","value":"","parent":null,"children":[],"decl_id":null,"docs":" An input reader over characters.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":399},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/input.rs","byte_start":151478,"byte_end":151481,"line_start":146,"line_end":146,"column_start":12,"column_end":15},"name":"new","qualname":"<CharInput>::new","value":"fn (s: &'t [u8]) -> CharInput<'t>","parent":null,"children":[],"decl_id":null,"docs":" Return a new character input reader for the given string.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1416},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/input.rs","byte_start":157629,"byte_end":157633,"line_start":348,"line_end":348,"column_start":12,"column_end":16},"name":"Char","qualname":"::input::Char","value":"","parent":null,"children":[],"decl_id":null,"docs":" An inline representation of `Option<char>`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":440},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/input.rs","byte_start":157957,"byte_end":157964,"line_start":362,"line_end":362,"column_start":12,"column_end":19},"name":"is_none","qualname":"<Char>::is_none","value":"fn (self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true iff the character is absent.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/input.rs","byte_start":157936,"byte_end":157945,"line_start":361,"line_end":361,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":441},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/input.rs","byte_start":158168,"byte_end":158176,"line_start":370,"line_end":370,"column_start":12,"column_end":20},"name":"len_utf8","qualname":"<Char>::len_utf8","value":"fn (self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the length of the character's UTF-8 encoding.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/input.rs","byte_start":158147,"byte_end":158156,"line_start":369,"line_end":369,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":443},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/input.rs","byte_start":158399,"byte_end":158411,"line_start":377,"line_end":377,"column_start":12,"column_end":24},"name":"is_word_char","qualname":"<Char>::is_word_char","value":"fn (self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true iff the character is a word character.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":444},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/input.rs","byte_start":158905,"byte_end":158917,"line_start":388,"line_end":388,"column_start":12,"column_end":24},"name":"is_word_byte","qualname":"<Char>::is_word_byte","value":"fn (self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true iff the byte is a word byte.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1440},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/literal/mod.rs","byte_start":160123,"byte_end":160138,"line_start":12,"line_end":12,"column_start":16,"column_end":31},"name":"LiteralSearcher","qualname":"::literal::imp::LiteralSearcher","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":463},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/literal/mod.rs","byte_start":160187,"byte_end":160192,"line_start":15,"line_end":15,"column_start":16,"column_end":21},"name":"empty","qualname":"<LiteralSearcher>::empty","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":464},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/literal/mod.rs","byte_start":160263,"byte_end":160271,"line_start":19,"line_end":19,"column_start":16,"column_end":24},"name":"prefixes","qualname":"<LiteralSearcher>::prefixes","value":"fn (_: Literals) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":465},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/literal/mod.rs","byte_start":160353,"byte_end":160361,"line_start":23,"line_end":23,"column_start":16,"column_end":24},"name":"suffixes","qualname":"<LiteralSearcher>::suffixes","value":"fn (_: Literals) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":466},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/literal/mod.rs","byte_start":160443,"byte_end":160451,"line_start":27,"line_end":27,"column_start":16,"column_end":24},"name":"complete","qualname":"<LiteralSearcher>::complete","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":467},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/literal/mod.rs","byte_start":160513,"byte_end":160517,"line_start":31,"line_end":31,"column_start":16,"column_end":20},"name":"find","qualname":"<LiteralSearcher>::find","value":"fn (&self, _: &[u8]) -> Option<(usize, usize)>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":468},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/literal/mod.rs","byte_start":160616,"byte_end":160626,"line_start":35,"line_end":35,"column_start":16,"column_end":26},"name":"find_start","qualname":"<LiteralSearcher>::find_start","value":"fn (&self, _: &[u8]) -> Option<(usize, usize)>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":469},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/literal/mod.rs","byte_start":160725,"byte_end":160733,"line_start":39,"line_end":39,"column_start":16,"column_end":24},"name":"find_end","qualname":"<LiteralSearcher>::find_end","value":"fn (&self, _: &[u8]) -> Option<(usize, usize)>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":470},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/literal/mod.rs","byte_start":160832,"byte_end":160840,"line_start":43,"line_end":43,"column_start":16,"column_end":24},"name":"is_empty","qualname":"<LiteralSearcher>::is_empty","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":471},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/literal/mod.rs","byte_start":160901,"byte_end":160904,"line_start":47,"line_end":47,"column_start":16,"column_end":19},"name":"len","qualname":"<LiteralSearcher>::len","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":472},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/literal/mod.rs","byte_start":160963,"byte_end":160979,"line_start":51,"line_end":51,"column_start":16,"column_end":32},"name":"approximate_size","qualname":"<LiteralSearcher>::approximate_size","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1484},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/prog.rs","byte_start":174089,"byte_end":174096,"line_start":18,"line_end":18,"column_start":12,"column_end":19},"name":"Program","qualname":"::prog::Program","value":"Program { insts, matches, captures, capture_name_idx, start, byte_classes, only_utf8, is_bytes, is_dfa, is_reverse, is_anchored_start, is_anchored_end, has_unicode_word_boundary, prefixes, dfa_size_limit }","parent":null,"children":[{"krate":0,"index":1485},{"krate":0,"index":1486},{"krate":0,"index":1487},{"krate":0,"index":1488},{"krate":0,"index":1489},{"krate":0,"index":1490},{"krate":0,"index":1491},{"krate":0,"index":1492},{"krate":0,"index":1493},{"krate":0,"index":1494},{"krate":0,"index":1495},{"krate":0,"index":1496},{"krate":0,"index":1497},{"krate":0,"index":1498},{"krate":0,"index":1499}],"decl_id":null,"docs":" Program is a sequence of instructions and various facts about thos\n instructions.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1485},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/prog.rs","byte_start":174166,"byte_end":174171,"line_start":20,"line_end":20,"column_start":9,"column_end":14},"name":"insts","qualname":"::prog::Program::insts","value":"std::vec::Vec<prog::Inst>","parent":{"krate":0,"index":1484},"children":[],"decl_id":null,"docs":" A sequence of instructions that represents an NFA.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1486},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/prog.rs","byte_start":174336,"byte_end":174343,"line_start":24,"line_end":24,"column_start":9,"column_end":16},"name":"matches","qualname":"::prog::Program::matches","value":"std::vec::Vec<usize>","parent":{"krate":0,"index":1484},"children":[],"decl_id":null,"docs":" Pointers to each Match instruction in the sequence.","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1487},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/prog.rs","byte_start":174477,"byte_end":174485,"line_start":27,"line_end":27,"column_start":9,"column_end":17},"name":"captures","qualname":"::prog::Program::captures","value":"std::vec::Vec<std::option::Option<std::string::String>>","parent":{"krate":0,"index":1484},"children":[],"decl_id":null,"docs":" The ordered sequence of all capture groups extracted from the AST.\n Unnamed groups are `None`.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1488},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/prog.rs","byte_start":174578,"byte_end":174594,"line_start":29,"line_end":29,"column_start":9,"column_end":25},"name":"capture_name_idx","qualname":"::prog::Program::capture_name_idx","value":"std::sync::Arc<std::collections::HashMap<std::string::String, usize>>","parent":{"krate":0,"index":1484},"children":[],"decl_id":null,"docs":" Pointers to all named capture groups into `captures`.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1489},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/prog.rs","byte_start":174951,"byte_end":174956,"line_start":35,"line_end":35,"column_start":9,"column_end":14},"name":"start","qualname":"::prog::Program::start","value":"usize","parent":{"krate":0,"index":1484},"children":[],"decl_id":null,"docs":" A pointer to the start instruction. This can vary depending on how\n the program was compiled. For example, programs for use with the DFA\n engine have a `.*?` inserted at the beginning of unanchored regular\n expressions. The actual starting point of the program is after the\n `.*?`.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1490},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/prog.rs","byte_start":175070,"byte_end":175082,"line_start":38,"line_end":38,"column_start":9,"column_end":21},"name":"byte_classes","qualname":"::prog::Program::byte_classes","value":"std::vec::Vec<u8>","parent":{"krate":0,"index":1484},"children":[],"decl_id":null,"docs":" A set of equivalence classes for discriminating bytes in the compiled\n program.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1491},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/prog.rs","byte_start":175161,"byte_end":175170,"line_start":40,"line_end":40,"column_start":9,"column_end":18},"name":"only_utf8","qualname":"::prog::Program::only_utf8","value":"bool","parent":{"krate":0,"index":1484},"children":[],"decl_id":null,"docs":" When true, this program can only match valid UTF-8.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1492},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/prog.rs","byte_start":175294,"byte_end":175302,"line_start":43,"line_end":43,"column_start":9,"column_end":17},"name":"is_bytes","qualname":"::prog::Program::is_bytes","value":"bool","parent":{"krate":0,"index":1484},"children":[],"decl_id":null,"docs":" When true, this program uses byte range instructions instead of Unicode\n range instructions.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1493},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/prog.rs","byte_start":175491,"byte_end":175497,"line_start":47,"line_end":47,"column_start":9,"column_end":15},"name":"is_dfa","qualname":"::prog::Program::is_dfa","value":"bool","parent":{"krate":0,"index":1484},"children":[],"decl_id":null,"docs":" When true, the program is compiled for DFA matching. For example, this\n implies `is_bytes` and also inserts a preceding `.*?` for unanchored\n regexes.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1494},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/prog.rs","byte_start":175603,"byte_end":175613,"line_start":50,"line_end":50,"column_start":9,"column_end":19},"name":"is_reverse","qualname":"::prog::Program::is_reverse","value":"bool","parent":{"krate":0,"index":1484},"children":[],"decl_id":null,"docs":" When true, the program matches text in reverse (for use only in the\n DFA).\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1495},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/prog.rs","byte_start":175695,"byte_end":175712,"line_start":52,"line_end":52,"column_start":9,"column_end":26},"name":"is_anchored_start","qualname":"::prog::Program::is_anchored_start","value":"bool","parent":{"krate":0,"index":1484},"children":[],"decl_id":null,"docs":" Whether the regex must match from the start of the input.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1496},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/prog.rs","byte_start":175790,"byte_end":175805,"line_start":54,"line_end":54,"column_start":9,"column_end":24},"name":"is_anchored_end","qualname":"::prog::Program::is_anchored_end","value":"bool","parent":{"krate":0,"index":1484},"children":[],"decl_id":null,"docs":" Whether the regex must match at the end of the input.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1497},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/prog.rs","byte_start":175896,"byte_end":175921,"line_start":56,"line_end":56,"column_start":9,"column_end":34},"name":"has_unicode_word_boundary","qualname":"::prog::Program::has_unicode_word_boundary","value":"bool","parent":{"krate":0,"index":1484},"children":[],"decl_id":null,"docs":" Whether this program contains a Unicode word boundary instruction.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1498},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/prog.rs","byte_start":176013,"byte_end":176021,"line_start":58,"line_end":58,"column_start":9,"column_end":17},"name":"prefixes","qualname":"::prog::Program::prefixes","value":"literal::imp::LiteralSearcher","parent":{"krate":0,"index":1484},"children":[],"decl_id":null,"docs":" A possibly empty machine for very quickly matching prefix literals.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1499},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/prog.rs","byte_start":176848,"byte_end":176862,"line_start":74,"line_end":74,"column_start":9,"column_end":23},"name":"dfa_size_limit","qualname":"::prog::Program::dfa_size_limit","value":"usize","parent":{"krate":0,"index":1484},"children":[],"decl_id":null,"docs":" A limit on the size of the cache that the DFA is allowed to use while\n matching.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":513},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/prog.rs","byte_start":176988,"byte_end":176991,"line_start":80,"line_end":80,"column_start":12,"column_end":15},"name":"new","qualname":"<Program>::new","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates an empty instruction sequence. Fields are given default\n values.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":514},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/prog.rs","byte_start":177708,"byte_end":177712,"line_start":102,"line_end":102,"column_start":12,"column_end":16},"name":"skip","qualname":"<Program>::skip","value":"fn (&self, mut pc: usize) -> usize","parent":null,"children":[],"decl_id":null,"docs":" If pc is an index to a no-op instruction (like Save), then return the\n next pc that is not a no-op instruction.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":515},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/prog.rs","byte_start":178026,"byte_end":178040,"line_start":113,"line_end":113,"column_start":12,"column_end":26},"name":"leads_to_match","qualname":"<Program>::leads_to_match","value":"fn (&self, pc: usize) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Return true if and only if an execution engine at instruction `pc` will\n always lead to a match.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":516},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/prog.rs","byte_start":178566,"byte_end":178579,"line_start":128,"line_end":128,"column_start":12,"column_end":25},"name":"needs_dotstar","qualname":"<Program>::needs_dotstar","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if the current configuration demands that an implicit\n `.*?` be prepended to the instruction sequence.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":517},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/prog.rs","byte_start":178786,"byte_end":178796,"line_start":134,"line_end":134,"column_start":12,"column_end":22},"name":"uses_bytes","qualname":"<Program>::uses_bytes","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if this program uses Byte instructions instead of\n Char/Range instructions.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":518},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/prog.rs","byte_start":179031,"byte_end":179040,"line_start":141,"line_end":141,"column_start":12,"column_end":21},"name":"only_utf8","qualname":"<Program>::only_utf8","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if this program exclusively matches valid UTF-8 bytes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":519},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/prog.rs","byte_start":179188,"byte_end":179204,"line_start":147,"line_end":147,"column_start":12,"column_end":28},"name":"approximate_size","qualname":"<Program>::approximate_size","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Return the approximate heap usage of this instruction sequence in\n bytes.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1503},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/prog.rs","byte_start":184147,"byte_end":184152,"line_start":276,"line_end":276,"column_start":5,"column_end":10},"name":"Match","qualname":"::prog::Inst::Match","value":"Inst::Match(usize)","parent":{"krate":0,"index":1502},"children":[],"decl_id":null,"docs":" Match indicates that the program has reached a match state.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1506},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/prog.rs","byte_start":184282,"byte_end":184286,"line_start":279,"line_end":279,"column_start":5,"column_end":9},"name":"Save","qualname":"::prog::Inst::Save","value":"Inst::Save(InstSave)","parent":{"krate":0,"index":1502},"children":[],"decl_id":null,"docs":" Save causes the program to save the current location of the input in\n the slot indicated by InstSave.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1509},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/prog.rs","byte_start":184421,"byte_end":184426,"line_start":282,"line_end":282,"column_start":5,"column_end":10},"name":"Split","qualname":"::prog::Inst::Split","value":"Inst::Split(InstSplit)","parent":{"krate":0,"index":1502},"children":[],"decl_id":null,"docs":" Split causes the program to diverge to one of two paths in the\n program, preferring goto1 in InstSplit.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1512},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/prog.rs","byte_start":184586,"byte_end":184595,"line_start":285,"line_end":285,"column_start":5,"column_end":14},"name":"EmptyLook","qualname":"::prog::Inst::EmptyLook","value":"Inst::EmptyLook(InstEmptyLook)","parent":{"krate":0,"index":1502},"children":[],"decl_id":null,"docs":" EmptyLook represents a zero-width assertion in a regex program. A\n zero-width assertion does not consume any of the input text.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1515},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/prog.rs","byte_start":184737,"byte_end":184741,"line_start":288,"line_end":288,"column_start":5,"column_end":9},"name":"Char","qualname":"::prog::Inst::Char","value":"Inst::Char(InstChar)","parent":{"krate":0,"index":1502},"children":[],"decl_id":null,"docs":" Char requires the regex program to match the character in InstChar at\n the current position in the input.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1518},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/prog.rs","byte_start":184915,"byte_end":184921,"line_start":291,"line_end":291,"column_start":5,"column_end":11},"name":"Ranges","qualname":"::prog::Inst::Ranges","value":"Inst::Ranges(InstRanges)","parent":{"krate":0,"index":1502},"children":[],"decl_id":null,"docs":" Ranges requires the regex program to match the character at the current\n position in the input with one of the ranges specified in InstRanges.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1521},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/prog.rs","byte_start":185119,"byte_end":185124,"line_start":295,"line_end":295,"column_start":5,"column_end":10},"name":"Bytes","qualname":"::prog::Inst::Bytes","value":"Inst::Bytes(InstBytes)","parent":{"krate":0,"index":1502},"children":[],"decl_id":null,"docs":" Bytes is like Ranges, except it expresses a single byte range. It is\n used in conjunction with Split instructions to implement multi-byte\n character classes.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":1502},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/prog.rs","byte_start":183718,"byte_end":183722,"line_start":268,"line_end":268,"column_start":10,"column_end":14},"name":"Inst","qualname":"::prog::Inst","value":"Inst::{Match, Save, Split, EmptyLook, Char, Ranges, Bytes}","parent":null,"children":[{"krate":0,"index":1503},{"krate":0,"index":1506},{"krate":0,"index":1509},{"krate":0,"index":1512},{"krate":0,"index":1515},{"krate":0,"index":1518},{"krate":0,"index":1521}],"decl_id":null,"docs":" Inst is an instruction code in a Regex program.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":536},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/prog.rs","byte_start":185228,"byte_end":185236,"line_start":300,"line_end":300,"column_start":12,"column_end":20},"name":"is_match","qualname":"<Inst>::is_match","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if and only if this is a match instruction.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1528},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/prog.rs","byte_start":185434,"byte_end":185442,"line_start":310,"line_end":310,"column_start":12,"column_end":20},"name":"InstSave","qualname":"::prog::InstSave","value":"InstSave { goto, slot }","parent":null,"children":[{"krate":0,"index":1529},{"krate":0,"index":1530}],"decl_id":null,"docs":" Representation of the Save instruction.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1529},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/prog.rs","byte_start":185506,"byte_end":185510,"line_start":312,"line_end":312,"column_start":9,"column_end":13},"name":"goto","qualname":"::prog::InstSave::goto","value":"usize","parent":{"krate":0,"index":1528},"children":[],"decl_id":null,"docs":" The next location to execute in the program.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1530},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/prog.rs","byte_start":185665,"byte_end":185669,"line_start":315,"line_end":315,"column_start":9,"column_end":13},"name":"slot","qualname":"::prog::InstSave::slot","value":"usize","parent":{"krate":0,"index":1528},"children":[],"decl_id":null,"docs":" The capture slot (there are two slots for every capture in a regex,\n including the zeroth capture for the entire match).\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1535},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/prog.rs","byte_start":185761,"byte_end":185770,"line_start":320,"line_end":320,"column_start":12,"column_end":21},"name":"InstSplit","qualname":"::prog::InstSplit","value":"InstSplit { goto1, goto2 }","parent":null,"children":[{"krate":0,"index":1536},{"krate":0,"index":1537}],"decl_id":null,"docs":" Representation of the Split instruction.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1536},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/prog.rs","byte_start":185926,"byte_end":185931,"line_start":323,"line_end":323,"column_start":9,"column_end":14},"name":"goto1","qualname":"::prog::InstSplit::goto1","value":"usize","parent":{"krate":0,"index":1535},"children":[],"decl_id":null,"docs":" The first instruction to try. A match resulting from following goto1\n has precedence over a match resulting from following goto2.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1537},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/prog.rs","byte_start":186096,"byte_end":186101,"line_start":326,"line_end":326,"column_start":9,"column_end":14},"name":"goto2","qualname":"::prog::InstSplit::goto2","value":"usize","parent":{"krate":0,"index":1535},"children":[],"decl_id":null,"docs":" The second instruction to try. A match resulting from following goto1\n has precedence over a match resulting from following goto2.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1542},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/prog.rs","byte_start":186201,"byte_end":186214,"line_start":331,"line_end":331,"column_start":12,"column_end":25},"name":"InstEmptyLook","qualname":"::prog::InstEmptyLook","value":"InstEmptyLook { goto, look }","parent":null,"children":[{"krate":0,"index":1543},{"krate":0,"index":1544}],"decl_id":null,"docs":" Representation of the `EmptyLook` instruction.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1543},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/prog.rs","byte_start":186315,"byte_end":186319,"line_start":334,"line_end":334,"column_start":9,"column_end":13},"name":"goto","qualname":"::prog::InstEmptyLook::goto","value":"usize","parent":{"krate":0,"index":1542},"children":[],"decl_id":null,"docs":" The next location to execute in the program if this instruction\n succeeds.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1544},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/prog.rs","byte_start":186389,"byte_end":186393,"line_start":336,"line_end":336,"column_start":9,"column_end":13},"name":"look","qualname":"::prog::InstEmptyLook::look","value":"prog::EmptyLook","parent":{"krate":0,"index":1542},"children":[],"decl_id":null,"docs":" The type of zero-width assertion to check.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1550},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/prog.rs","byte_start":186557,"byte_end":186566,"line_start":343,"line_end":343,"column_start":5,"column_end":14},"name":"StartLine","qualname":"::prog::EmptyLook::StartLine","value":"EmptyLook::StartLine","parent":{"krate":0,"index":1549},"children":[],"decl_id":null,"docs":" Start of line or input.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1552},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/prog.rs","byte_start":186602,"byte_end":186609,"line_start":345,"line_end":345,"column_start":5,"column_end":12},"name":"EndLine","qualname":"::prog::EmptyLook::EndLine","value":"EmptyLook::EndLine","parent":{"krate":0,"index":1549},"children":[],"decl_id":null,"docs":" End of line or input.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1554},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/prog.rs","byte_start":186639,"byte_end":186648,"line_start":347,"line_end":347,"column_start":5,"column_end":14},"name":"StartText","qualname":"::prog::EmptyLook::StartText","value":"EmptyLook::StartText","parent":{"krate":0,"index":1549},"children":[],"decl_id":null,"docs":" Start of input.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1556},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/prog.rs","byte_start":186676,"byte_end":186683,"line_start":349,"line_end":349,"column_start":5,"column_end":12},"name":"EndText","qualname":"::prog::EmptyLook::EndText","value":"EmptyLook::EndText","parent":{"krate":0,"index":1549},"children":[],"decl_id":null,"docs":" End of input.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1558},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/prog.rs","byte_start":186757,"byte_end":186769,"line_start":351,"line_end":351,"column_start":5,"column_end":17},"name":"WordBoundary","qualname":"::prog::EmptyLook::WordBoundary","value":"EmptyLook::WordBoundary","parent":{"krate":0,"index":1549},"children":[],"decl_id":null,"docs":" Word character on one side and non-word character on other.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1560},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/prog.rs","byte_start":186849,"byte_end":186864,"line_start":353,"line_end":353,"column_start":5,"column_end":20},"name":"NotWordBoundary","qualname":"::prog::EmptyLook::NotWordBoundary","value":"EmptyLook::NotWordBoundary","parent":{"krate":0,"index":1549},"children":[],"decl_id":null,"docs":" Word character on both sides or non-word character on both sides.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1562},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/prog.rs","byte_start":186899,"byte_end":186916,"line_start":355,"line_end":355,"column_start":5,"column_end":22},"name":"WordBoundaryAscii","qualname":"::prog::EmptyLook::WordBoundaryAscii","value":"EmptyLook::WordBoundaryAscii","parent":{"krate":0,"index":1549},"children":[],"decl_id":null,"docs":" ASCII word boundary.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1564},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/prog.rs","byte_start":186955,"byte_end":186975,"line_start":357,"line_end":357,"column_start":5,"column_end":25},"name":"NotWordBoundaryAscii","qualname":"::prog::EmptyLook::NotWordBoundaryAscii","value":"EmptyLook::NotWordBoundaryAscii","parent":{"krate":0,"index":1549},"children":[],"decl_id":null,"docs":" Not ASCII word boundary.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":1549},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/prog.rs","byte_start":186509,"byte_end":186518,"line_start":341,"line_end":341,"column_start":10,"column_end":19},"name":"EmptyLook","qualname":"::prog::EmptyLook","value":"EmptyLook::{StartLine, EndLine, StartText, EndText, WordBoundary, NotWordBoundary, WordBoundaryAscii, NotWordBoundaryAscii}","parent":null,"children":[{"krate":0,"index":1550},{"krate":0,"index":1552},{"krate":0,"index":1554},{"krate":0,"index":1556},{"krate":0,"index":1558},{"krate":0,"index":1560},{"krate":0,"index":1562},{"krate":0,"index":1564}],"decl_id":null,"docs":" The set of zero-width match instructions.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1577},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/prog.rs","byte_start":187059,"byte_end":187067,"line_start":362,"line_end":362,"column_start":12,"column_end":20},"name":"InstChar","qualname":"::prog::InstChar","value":"InstChar { goto, c }","parent":null,"children":[{"krate":0,"index":1578},{"krate":0,"index":1579}],"decl_id":null,"docs":" Representation of the Char instruction.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1578},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/prog.rs","byte_start":187168,"byte_end":187172,"line_start":365,"line_end":365,"column_start":9,"column_end":13},"name":"goto","qualname":"::prog::InstChar::goto","value":"usize","parent":{"krate":0,"index":1577},"children":[],"decl_id":null,"docs":" The next location to execute in the program if this instruction\n succeeds.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1579},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/prog.rs","byte_start":187222,"byte_end":187223,"line_start":367,"line_end":367,"column_start":9,"column_end":10},"name":"c","qualname":"::prog::InstChar::c","value":"char","parent":{"krate":0,"index":1577},"children":[],"decl_id":null,"docs":" The character to test.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1584},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/prog.rs","byte_start":187315,"byte_end":187325,"line_start":372,"line_end":372,"column_start":12,"column_end":22},"name":"InstRanges","qualname":"::prog::InstRanges","value":"InstRanges { goto, ranges }","parent":null,"children":[{"krate":0,"index":1585},{"krate":0,"index":1586}],"decl_id":null,"docs":" Representation of the Ranges instruction.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1585},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/prog.rs","byte_start":187426,"byte_end":187430,"line_start":375,"line_end":375,"column_start":9,"column_end":13},"name":"goto","qualname":"::prog::InstRanges::goto","value":"usize","parent":{"krate":0,"index":1584},"children":[],"decl_id":null,"docs":" The next location to execute in the program if this instruction\n succeeds.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1586},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/prog.rs","byte_start":187505,"byte_end":187511,"line_start":377,"line_end":377,"column_start":9,"column_end":15},"name":"ranges","qualname":"::prog::InstRanges::ranges","value":"std::vec::Vec<(char, char)>","parent":{"krate":0,"index":1584},"children":[],"decl_id":null,"docs":" The set of Unicode scalar value ranges to test.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":538},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/prog.rs","byte_start":187638,"byte_end":187645,"line_start":382,"line_end":382,"column_start":12,"column_end":19},"name":"matches","qualname":"<InstRanges>::matches","value":"fn (&self, c: Char) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Tests whether the given input character matches this instruction.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":540},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/prog.rs","byte_start":188489,"byte_end":188498,"line_start":409,"line_end":409,"column_start":12,"column_end":21},"name":"num_chars","qualname":"<InstRanges>::num_chars","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Return the number of distinct characters represented by all of the\n ranges.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1591},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/prog.rs","byte_start":188737,"byte_end":188746,"line_start":419,"line_end":419,"column_start":12,"column_end":21},"name":"InstBytes","qualname":"::prog::InstBytes","value":"InstBytes { goto, start, end }","parent":null,"children":[{"krate":0,"index":1592},{"krate":0,"index":1593},{"krate":0,"index":1594}],"decl_id":null,"docs":" Representation of the Bytes instruction.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1592},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/prog.rs","byte_start":188847,"byte_end":188851,"line_start":422,"line_end":422,"column_start":9,"column_end":13},"name":"goto","qualname":"::prog::InstBytes::goto","value":"usize","parent":{"krate":0,"index":1591},"children":[],"decl_id":null,"docs":" The next location to execute in the program if this instruction\n succeeds.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1593},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/prog.rs","byte_start":188920,"byte_end":188925,"line_start":424,"line_end":424,"column_start":9,"column_end":14},"name":"start","qualname":"::prog::InstBytes::start","value":"u8","parent":{"krate":0,"index":1591},"children":[],"decl_id":null,"docs":" The start (inclusive) of this byte range.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1594},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/prog.rs","byte_start":188987,"byte_end":188990,"line_start":426,"line_end":426,"column_start":9,"column_end":12},"name":"end","qualname":"::prog::InstBytes::end","value":"u8","parent":{"krate":0,"index":1591},"children":[],"decl_id":null,"docs":" The end (inclusive) of this byte range.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":543},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/prog.rs","byte_start":189096,"byte_end":189103,"line_start":431,"line_end":431,"column_start":12,"column_end":19},"name":"matches","qualname":"<InstBytes>::matches","value":"fn (&self, byte: u8) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if and only if the given byte is in this range.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1599},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/re_builder.rs","byte_start":189322,"byte_end":189334,"line_start":4,"line_end":4,"column_start":12,"column_end":24},"name":"RegexOptions","qualname":"::re_builder::RegexOptions","value":"RegexOptions { pats, size_limit, dfa_size_limit, nest_limit, case_insensitive, multi_line, dot_matches_new_line, swap_greed, ignore_whitespace, unicode, octal }","parent":null,"children":[{"krate":0,"index":1600},{"krate":0,"index":1601},{"krate":0,"index":1602},{"krate":0,"index":1603},{"krate":0,"index":1604},{"krate":0,"index":1605},{"krate":0,"index":1606},{"krate":0,"index":1607},{"krate":0,"index":1608},{"krate":0,"index":1609},{"krate":0,"index":1610}],"decl_id":null,"docs":" The set of user configurable options for compiling zero or more regexes.\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/re_builder.rs","byte_start":189288,"byte_end":189310,"line_start":3,"line_end":3,"column_start":1,"column_end":23}}]},{"kind":"Field","id":{"krate":0,"index":1600},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/re_builder.rs","byte_start":189345,"byte_end":189349,"line_start":5,"line_end":5,"column_start":9,"column_end":13},"name":"pats","qualname":"::re_builder::RegexOptions::pats","value":"std::vec::Vec<std::string::String>","parent":{"krate":0,"index":1599},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1601},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/re_builder.rs","byte_start":189372,"byte_end":189382,"line_start":6,"line_end":6,"column_start":9,"column_end":19},"name":"size_limit","qualname":"::re_builder::RegexOptions::size_limit","value":"usize","parent":{"krate":0,"index":1599},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1602},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/re_builder.rs","byte_start":189399,"byte_end":189413,"line_start":7,"line_end":7,"column_start":9,"column_end":23},"name":"dfa_size_limit","qualname":"::re_builder::RegexOptions::dfa_size_limit","value":"usize","parent":{"krate":0,"index":1599},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1603},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/re_builder.rs","byte_start":189430,"byte_end":189440,"line_start":8,"line_end":8,"column_start":9,"column_end":19},"name":"nest_limit","qualname":"::re_builder::RegexOptions::nest_limit","value":"u32","parent":{"krate":0,"index":1599},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1604},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/re_builder.rs","byte_start":189455,"byte_end":189471,"line_start":9,"line_end":9,"column_start":9,"column_end":25},"name":"case_insensitive","qualname":"::re_builder::RegexOptions::case_insensitive","value":"bool","parent":{"krate":0,"index":1599},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1605},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/re_builder.rs","byte_start":189487,"byte_end":189497,"line_start":10,"line_end":10,"column_start":9,"column_end":19},"name":"multi_line","qualname":"::re_builder::RegexOptions::multi_line","value":"bool","parent":{"krate":0,"index":1599},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1606},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/re_builder.rs","byte_start":189513,"byte_end":189533,"line_start":11,"line_end":11,"column_start":9,"column_end":29},"name":"dot_matches_new_line","qualname":"::re_builder::RegexOptions::dot_matches_new_line","value":"bool","parent":{"krate":0,"index":1599},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1607},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/re_builder.rs","byte_start":189549,"byte_end":189559,"line_start":12,"line_end":12,"column_start":9,"column_end":19},"name":"swap_greed","qualname":"::re_builder::RegexOptions::swap_greed","value":"bool","parent":{"krate":0,"index":1599},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1608},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/re_builder.rs","byte_start":189575,"byte_end":189592,"line_start":13,"line_end":13,"column_start":9,"column_end":26},"name":"ignore_whitespace","qualname":"::re_builder::RegexOptions::ignore_whitespace","value":"bool","parent":{"krate":0,"index":1599},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1609},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/re_builder.rs","byte_start":189608,"byte_end":189615,"line_start":14,"line_end":14,"column_start":9,"column_end":16},"name":"unicode","qualname":"::re_builder::RegexOptions::unicode","value":"bool","parent":{"krate":0,"index":1599},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1610},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/re_builder.rs","byte_start":189631,"byte_end":189636,"line_start":15,"line_end":15,"column_start":9,"column_end":14},"name":"octal","qualname":"::re_builder::RegexOptions::octal","value":"bool","parent":{"krate":0,"index":1599},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1703},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/re_bytes.rs","byte_start":208571,"byte_end":208576,"line_start":20,"line_end":20,"column_start":12,"column_end":17},"name":"Match","qualname":"::re_bytes::Match","value":"Match {  }","parent":null,"children":[{"krate":0,"index":1705},{"krate":0,"index":1706},{"krate":0,"index":1707}],"decl_id":null,"docs":" Match represents a single match of a regex in a haystack.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":571},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/re_bytes.rs","byte_start":208757,"byte_end":208762,"line_start":29,"line_end":29,"column_start":12,"column_end":17},"name":"start","qualname":"<Match>::start","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the starting byte offset of the match in the haystack.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/re_bytes.rs","byte_start":208736,"byte_end":208745,"line_start":28,"line_end":28,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":572},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/re_bytes.rs","byte_start":208901,"byte_end":208904,"line_start":35,"line_end":35,"column_start":12,"column_end":15},"name":"end","qualname":"<Match>::end","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the ending byte offset of the match in the haystack.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/re_bytes.rs","byte_start":208880,"byte_end":208889,"line_start":34,"line_end":34,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":573},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/re_bytes.rs","byte_start":209078,"byte_end":209083,"line_start":42,"line_end":42,"column_start":12,"column_end":17},"name":"range","qualname":"<Match>::range","value":"fn (&self) -> Range<usize>","parent":null,"children":[],"decl_id":null,"docs":" Returns the range over the starting and ending byte offsets of the\n match in the haystack.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/re_bytes.rs","byte_start":209057,"byte_end":209066,"line_start":41,"line_end":41,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":574},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/re_bytes.rs","byte_start":209204,"byte_end":209212,"line_start":48,"line_end":48,"column_start":12,"column_end":20},"name":"as_bytes","qualname":"<Match>::as_bytes","value":"fn (&self) -> &'t [u8]","parent":null,"children":[],"decl_id":null,"docs":" Returns the matched text.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/re_bytes.rs","byte_start":209183,"byte_end":209192,"line_start":47,"line_end":47,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":1727},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/re_bytes.rs","byte_start":210288,"byte_end":210293,"line_start":77,"line_end":77,"column_start":12,"column_end":17},"name":"Regex","qualname":"::re_bytes::Regex","value":"","parent":null,"children":[],"decl_id":null,"docs":" A compiled regular expression for matching arbitrary bytes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":589},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/re_bytes.rs","byte_start":211352,"byte_end":211355,"line_start":118,"line_end":118,"column_start":12,"column_end":15},"name":"new","qualname":"<Regex>::new","value":"fn (re: &str) -> Result<Regex, Error>","parent":null,"children":[],"decl_id":null,"docs":" Compiles a regular expression. Once compiled, it can be used repeatedly\n to search, split or replace text in a string.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":590},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/re_bytes.rs","byte_start":212086,"byte_end":212094,"line_start":140,"line_end":140,"column_start":12,"column_end":20},"name":"is_match","qualname":"<Regex>::is_match","value":"fn (&self, text: &[u8]) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if and only if the regex matches the string given.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":591},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/re_bytes.rs","byte_start":212956,"byte_end":212960,"line_start":164,"line_end":164,"column_start":12,"column_end":16},"name":"find","qualname":"<Regex>::find","value":"fn <'t> (&self, text: &'t [u8]) -> Option<Match<'t>>","parent":null,"children":[],"decl_id":null,"docs":" Returns the start and end byte range of the leftmost-first match in\n `text`. If no match exists, then `None` is returned.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":593},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/re_bytes.rs","byte_start":213676,"byte_end":213685,"line_start":186,"line_end":186,"column_start":12,"column_end":21},"name":"find_iter","qualname":"<Regex>::find_iter","value":"fn <'r, 't> (&'r self, text: &'t [u8]) -> Matches<'r, 't>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator for each successive non-overlapping match in\n `text`, returning the start and end byte indices with respect to\n `text`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":596},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/re_bytes.rs","byte_start":216822,"byte_end":216830,"line_start":253,"line_end":253,"column_start":12,"column_end":20},"name":"captures","qualname":"<Regex>::captures","value":"fn <'t> (&self, text: &'t [u8]) -> Option<Captures<'t>>","parent":null,"children":[],"decl_id":null,"docs":" Returns the capture groups corresponding to the leftmost-first\n match in `text`. Capture group `0` always corresponds to the entire\n match. If no match is found, then `None` is returned.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":599},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/re_bytes.rs","byte_start":218275,"byte_end":218288,"line_start":288,"line_end":288,"column_start":12,"column_end":25},"name":"captures_iter","qualname":"<Regex>::captures_iter","value":"fn <'r, 't> (&'r self, text: &'t [u8]) -> CaptureMatches<'r, 't>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over all the non-overlapping capture groups matched\n in `text`. This is operationally the same as `find_iter`, except it\n yields information about capturing group matches.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":602},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/re_bytes.rs","byte_start":219206,"byte_end":219211,"line_start":315,"line_end":315,"column_start":12,"column_end":17},"name":"split","qualname":"<Regex>::split","value":"fn <'r, 't> (&'r self, text: &'t [u8]) -> Split<'r, 't>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator of substrings of `text` delimited by a match of the\n regular expression. Namely, each element of the iterator corresponds to\n text that *isn't* matched by the regular expression.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":605},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/re_bytes.rs","byte_start":220194,"byte_end":220200,"line_start":339,"line_end":339,"column_start":12,"column_end":18},"name":"splitn","qualname":"<Regex>::splitn","value":"fn <'r, 't> (&'r self, text: &'t [u8], limit: usize) -> SplitN<'r, 't>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator of at most `limit` substrings of `text` delimited\n by a match of the regular expression. (A `limit` of `0` will return no\n substrings.) Namely, each element of the iterator corresponds to text\n that *isn't* matched by the regular expression. The remainder of the\n string that is not split will be the last element in the iterator.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":608},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/re_bytes.rs","byte_start":224950,"byte_end":224957,"line_start":455,"line_end":455,"column_start":12,"column_end":19},"name":"replace","qualname":"<Regex>::replace","value":"fn <'t, R> (&self, text: &'t [u8], rep: R) -> Cow<'t, [u8]>","parent":null,"children":[],"decl_id":null,"docs":" Replaces the leftmost-first match with the replacement provided. The\n replacement can be a regular byte string (where `$N` and `$name` are\n expanded to match capture groups) or a function that takes the matches'\n `Captures` and returns the replaced byte string.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":611},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/re_bytes.rs","byte_start":225414,"byte_end":225425,"line_start":469,"line_end":469,"column_start":12,"column_end":23},"name":"replace_all","qualname":"<Regex>::replace_all","value":"fn <'t, R> (&self, text: &'t [u8], rep: R) -> Cow<'t, [u8]>","parent":null,"children":[],"decl_id":null,"docs":" Replaces all non-overlapping matches in `text` with the replacement\n provided. This is the same as calling `replacen` with `limit` set to\n `0`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":614},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/re_bytes.rs","byte_start":225894,"byte_end":225902,"line_start":483,"line_end":483,"column_start":12,"column_end":20},"name":"replacen","qualname":"<Regex>::replacen","value":"fn <'t, R> (&self, text: &'t [u8], limit: usize, mut rep: R) -> Cow<'t, [u8]>","parent":null,"children":[],"decl_id":null,"docs":" Replaces at most `limit` non-overlapping matches in `text` with the\n replacement provided. If `limit` is 0, then all non-overlapping matches\n are replaced.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":618},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/re_bytes.rs","byte_start":228379,"byte_end":228393,"line_start":554,"line_end":554,"column_start":12,"column_end":26},"name":"shortest_match","qualname":"<Regex>::shortest_match","value":"fn (&self, text: &[u8]) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":" Returns the end location of a match in the text given.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":619},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/re_bytes.rs","byte_start":228781,"byte_end":228798,"line_start":564,"line_end":564,"column_start":12,"column_end":29},"name":"shortest_match_at","qualname":"<Regex>::shortest_match_at","value":"fn (&self, text: &[u8], start: usize) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":" Returns the same as shortest_match, but starts the search at the given\n offset.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":620},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/re_bytes.rs","byte_start":229242,"byte_end":229253,"line_start":578,"line_end":578,"column_start":12,"column_end":23},"name":"is_match_at","qualname":"<Regex>::is_match_at","value":"fn (&self, text: &[u8], start: usize) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns the same as is_match, but starts the search at the given\n offset.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":621},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/re_bytes.rs","byte_start":229650,"byte_end":229657,"line_start":588,"line_end":588,"column_start":12,"column_end":19},"name":"find_at","qualname":"<Regex>::find_at","value":"fn <'t> (&self, text: &'t [u8], start: usize) -> Option<Match<'t>>","parent":null,"children":[],"decl_id":null,"docs":" Returns the same as find, but starts the search at the given\n offset.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":624},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/re_bytes.rs","byte_start":230331,"byte_end":230344,"line_start":609,"line_end":609,"column_start":12,"column_end":25},"name":"captures_read","qualname":"<Regex>::captures_read","value":"fn <'t> (&self, locs: &mut CaptureLocations, text: &'t [u8]) -> Option<Match<'t>>","parent":null,"children":[],"decl_id":null,"docs":" This is like `captures`, but uses\n [`CaptureLocations`](struct.CaptureLocations.html)\n instead of\n [`Captures`](struct.Captures.html) in order to amortize allocations.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":626},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/re_bytes.rs","byte_start":230851,"byte_end":230867,"line_start":623,"line_end":623,"column_start":12,"column_end":28},"name":"captures_read_at","qualname":"<Regex>::captures_read_at","value":"fn <'t> (&self, locs: &mut CaptureLocations, text: &'t [u8], start: usize) -> Option<Match<'t>>","parent":null,"children":[],"decl_id":null,"docs":" Returns the same as `captures_read`, but starts the search at the given\n offset and populates the capture locations given.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":629},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/re_bytes.rs","byte_start":231412,"byte_end":231428,"line_start":641,"line_end":641,"column_start":12,"column_end":28},"name":"read_captures_at","qualname":"<Regex>::read_captures_at","value":"fn <'t> (&self, locs: &mut CaptureLocations, text: &'t [u8], start: usize) -> Option<Match<'t>>","parent":null,"children":[],"decl_id":null,"docs":" An undocumented alias for `captures_read_at`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":632},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/re_bytes.rs","byte_start":231717,"byte_end":231723,"line_start":654,"line_end":654,"column_start":12,"column_end":18},"name":"as_str","qualname":"<Regex>::as_str","value":"fn (&self) -> &str","parent":null,"children":[],"decl_id":null,"docs":" Returns the original string of this regex.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":633},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/re_bytes.rs","byte_start":231846,"byte_end":231859,"line_start":659,"line_end":659,"column_start":12,"column_end":25},"name":"capture_names","qualname":"<Regex>::capture_names","value":"fn (&self) -> CaptureNames","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over the capture names.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":634},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/re_bytes.rs","byte_start":231995,"byte_end":232007,"line_start":664,"line_end":664,"column_start":12,"column_end":24},"name":"captures_len","qualname":"<Regex>::captures_len","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of captures.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":635},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/re_bytes.rs","byte_start":232218,"byte_end":232235,"line_start":670,"line_end":670,"column_start":12,"column_end":29},"name":"capture_locations","qualname":"<Regex>::capture_locations","value":"fn (&self) -> CaptureLocations","parent":null,"children":[],"decl_id":null,"docs":" Returns an empty set of capture locations that can be reused in\n multiple calls to `captures_read` or `captures_read_at`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":636},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/re_bytes.rs","byte_start":232582,"byte_end":232591,"line_start":679,"line_end":679,"column_start":12,"column_end":21},"name":"locations","qualname":"<Regex>::locations","value":"fn (&self) -> CaptureLocations","parent":null,"children":[],"decl_id":null,"docs":" An alias for `capture_locations` to preserve backward compatibility.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":637},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/re_bytes.rs","byte_start":233081,"byte_end":233088,"line_start":692,"line_end":692,"column_start":12,"column_end":19},"name":"Matches","qualname":"::re_bytes::Matches","value":"","parent":null,"children":[],"decl_id":null,"docs":" An iterator over all non-overlapping matches for a particular string.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":648},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/re_bytes.rs","byte_start":233661,"byte_end":233675,"line_start":710,"line_end":710,"column_start":12,"column_end":26},"name":"CaptureMatches","qualname":"::re_bytes::CaptureMatches","value":"","parent":null,"children":[],"decl_id":null,"docs":" An iterator that yields all non-overlapping capture groups matching a\n particular regular expression.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":659},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/re_bytes.rs","byte_start":234263,"byte_end":234268,"line_start":730,"line_end":730,"column_start":12,"column_end":17},"name":"Split","qualname":"::re_bytes::Split","value":"Split {  }","parent":null,"children":[{"krate":0,"index":662},{"krate":0,"index":663}],"decl_id":null,"docs":" Yields all substrings delimited by a regular expression match.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":669},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/re_bytes.rs","byte_start":235284,"byte_end":235290,"line_start":765,"line_end":765,"column_start":12,"column_end":18},"name":"SplitN","qualname":"::re_bytes::SplitN","value":"SplitN {  }","parent":null,"children":[{"krate":0,"index":672},{"krate":0,"index":673}],"decl_id":null,"docs":" Yields at most `N` substrings delimited by a regular expression match.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":679},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/re_bytes.rs","byte_start":236188,"byte_end":236200,"line_start":800,"line_end":800,"column_start":12,"column_end":24},"name":"CaptureNames","qualname":"::re_bytes::CaptureNames","value":"","parent":null,"children":[],"decl_id":null,"docs":" An iterator over the names of all possible captures.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1732},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/re_bytes.rs","byte_start":237361,"byte_end":237377,"line_start":833,"line_end":833,"column_start":12,"column_end":28},"name":"CaptureLocations","qualname":"::re_bytes::CaptureLocations","value":"","parent":null,"children":[],"decl_id":null,"docs":" CaptureLocations is a low level representation of the raw offsets of each\n submatch.","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":690},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/re_bytes.rs","byte_start":237699,"byte_end":237708,"line_start":841,"line_end":841,"column_start":10,"column_end":19},"name":"Locations","qualname":"::re_bytes::Locations","value":"CaptureLocations","parent":null,"children":[],"decl_id":null,"docs":" A type alias for `CaptureLocations` for backwards compatibility.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":692},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/re_bytes.rs","byte_start":238066,"byte_end":238069,"line_start":849,"line_end":849,"column_start":12,"column_end":15},"name":"get","qualname":"<CaptureLocations>::get","value":"fn (&self, i: usize) -> Option<(usize, usize)>","parent":null,"children":[],"decl_id":null,"docs":" Returns the start and end positions of the Nth capture group. Returns\n `None` if `i` is not a valid capture group or if the capture group did\n not match anything. The positions returned are *always* byte indices\n with respect to the original string matched.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/re_bytes.rs","byte_start":238045,"byte_end":238054,"line_start":848,"line_end":848,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":693},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/re_bytes.rs","byte_start":238364,"byte_end":238367,"line_start":858,"line_end":858,"column_start":12,"column_end":15},"name":"len","qualname":"<CaptureLocations>::len","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the total number of capturing groups.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/re_bytes.rs","byte_start":238343,"byte_end":238352,"line_start":857,"line_end":857,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":694},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/re_bytes.rs","byte_start":238727,"byte_end":238730,"line_start":869,"line_end":869,"column_start":12,"column_end":15},"name":"pos","qualname":"<CaptureLocations>::pos","value":"fn (&self, i: usize) -> Option<(usize, usize)>","parent":null,"children":[],"decl_id":null,"docs":" An alias for the `get` method for backwards compatibility.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/re_bytes.rs","byte_start":238706,"byte_end":238715,"line_start":868,"line_end":868,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":695},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/re_bytes.rs","byte_start":239364,"byte_end":239372,"line_start":885,"line_end":885,"column_start":12,"column_end":20},"name":"Captures","qualname":"::re_bytes::Captures","value":"Captures {  }","parent":null,"children":[{"krate":0,"index":697},{"krate":0,"index":698},{"krate":0,"index":699}],"decl_id":null,"docs":" Captures represents a group of captured byte strings for a single match.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":702},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/re_bytes.rs","byte_start":240307,"byte_end":240310,"line_start":911,"line_end":911,"column_start":12,"column_end":15},"name":"get","qualname":"<Captures>::get","value":"fn (&self, i: usize) -> Option<Match<'t>>","parent":null,"children":[],"decl_id":null,"docs":" Returns the match associated with the capture group at index `i`. If\n `i` does not correspond to a capture group, or if the capture group\n did not participate in the match, then `None` is returned.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":704},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/re_bytes.rs","byte_start":240595,"byte_end":240599,"line_start":917,"line_end":917,"column_start":12,"column_end":16},"name":"name","qualname":"<Captures>::name","value":"fn (&self, name: &str) -> Option<Match<'t>>","parent":null,"children":[],"decl_id":null,"docs":" Returns the match for the capture group named `name`. If `name` isn't a\n valid capture group or didn't match anything, then `None` is returned.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":706},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/re_bytes.rs","byte_start":241031,"byte_end":241035,"line_start":926,"line_end":926,"column_start":12,"column_end":16},"name":"iter","qualname":"<Captures>::iter","value":"fn <'c> (&'c self) -> SubCaptureMatches<'c, 't>","parent":null,"children":[],"decl_id":null,"docs":" An iterator that yields all capturing matches in the order in which\n they appear in the regex. If a particular capture group didn't\n participate in the match, then `None` is yielded for that capture.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":708},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/re_bytes.rs","byte_start":242046,"byte_end":242052,"line_start":946,"line_end":946,"column_start":12,"column_end":18},"name":"expand","qualname":"<Captures>::expand","value":"fn (&self, replacement: &[u8], dst: &mut Vec<u8>) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Expands all instances of `$name` in `replacement` to the corresponding\n capture group `name`, and writes them to the `dst` buffer given.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":709},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/re_bytes.rs","byte_start":242363,"byte_end":242366,"line_start":955,"line_end":955,"column_start":12,"column_end":15},"name":"len","qualname":"<Captures>::len","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of captured groups.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/re_bytes.rs","byte_start":242342,"byte_end":242351,"line_start":954,"line_end":954,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":741},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/re_bytes.rs","byte_start":245522,"byte_end":245539,"line_start":1054,"line_end":1054,"column_start":12,"column_end":29},"name":"SubCaptureMatches","qualname":"::re_bytes::SubCaptureMatches","value":"SubCaptureMatches {  }","parent":null,"children":[{"krate":0,"index":744},{"krate":0,"index":745}],"decl_id":null,"docs":" An iterator that yields all capturing matches in the order in which they\n appear in the regex.","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":753},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/re_bytes.rs","byte_start":246245,"byte_end":246253,"line_start":1076,"line_end":1076,"column_start":11,"column_end":19},"name":"Replacer","qualname":"::re_bytes::Replacer","value":"Replacer","parent":null,"children":[{"krate":0,"index":754},{"krate":0,"index":755},{"krate":0,"index":757}],"decl_id":null,"docs":" Replacer describes types that can be used to replace matches in a byte\n string.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":754},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/re_bytes.rs","byte_start":246539,"byte_end":246553,"line_start":1084,"line_end":1084,"column_start":8,"column_end":22},"name":"replace_append","qualname":"::re_bytes::Replacer::replace_append","value":"fn (&mut self, caps: &Captures, dst: &mut Vec<u8>) -> ()","parent":{"krate":0,"index":753},"children":[],"decl_id":null,"docs":" Appends text to `dst` to replace the current match.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":755},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/re_bytes.rs","byte_start":246964,"byte_end":246976,"line_start":1093,"line_end":1093,"column_start":8,"column_end":20},"name":"no_expansion","qualname":"::re_bytes::Replacer::no_expansion","value":"fn <'r> (&'r mut self) -> Option<Cow<'r, [u8]>>","parent":{"krate":0,"index":753},"children":[],"decl_id":null,"docs":" Return a fixed unchanging replacement byte string.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":757},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/re_bytes.rs","byte_start":247707,"byte_end":247713,"line_start":1118,"line_end":1118,"column_start":8,"column_end":14},"name":"by_ref","qualname":"::re_bytes::Replacer::by_ref","value":"fn <'r> (&'r mut self) -> ReplacerRef<'r, Self>","parent":{"krate":0,"index":753},"children":[],"decl_id":null,"docs":" Return a `Replacer` that borrows and wraps this `Replacer`.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1739},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/re_bytes.rs","byte_start":247941,"byte_end":247952,"line_start":1127,"line_end":1127,"column_start":12,"column_end":23},"name":"ReplacerRef","qualname":"::re_bytes::ReplacerRef","value":"","parent":null,"children":[],"decl_id":null,"docs":" By-reference adaptor for a `Replacer`","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":773},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/re_bytes.rs","byte_start":249249,"byte_end":249257,"line_start":1169,"line_end":1169,"column_start":12,"column_end":20},"name":"NoExpand","qualname":"::re_bytes::NoExpand","value":"","parent":null,"children":[],"decl_id":null,"docs":" `NoExpand` indicates literal byte string replacement.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1898},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/re_trait.rs","byte_start":265106,"byte_end":265115,"line_start":12,"line_end":12,"column_start":12,"column_end":21},"name":"Locations","qualname":"::re_trait::Locations","value":"","parent":null,"children":[],"decl_id":null,"docs":" Locations represents the offsets of each capturing group in a regex for\n a single match.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":786},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/re_trait.rs","byte_start":265444,"byte_end":265447,"line_start":19,"line_end":19,"column_start":12,"column_end":15},"name":"pos","qualname":"<Locations>::pos","value":"fn (&self, i: usize) -> Option<(usize, usize)>","parent":null,"children":[],"decl_id":null,"docs":" Returns the start and end positions of the Nth capture group. Returns\n `None` if `i` is not a valid capture group or if the capture group did\n not match anything. The positions returned are *always* byte indices\n with respect to the original string matched.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":787},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/re_trait.rs","byte_start":265891,"byte_end":265895,"line_start":30,"line_end":30,"column_start":12,"column_end":16},"name":"iter","qualname":"<Locations>::iter","value":"fn (&self) -> SubCapturesPosIter","parent":null,"children":[],"decl_id":null,"docs":" Creates an iterator of all the capture group positions in order of\n appearance in the regular expression. Positions are byte indices\n in terms of the original string matched.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":788},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/re_trait.rs","byte_start":266190,"byte_end":266193,"line_start":38,"line_end":38,"column_start":12,"column_end":15},"name":"len","qualname":"<Locations>::len","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the total number of capturing groups.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":790},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/re_trait.rs","byte_start":266606,"byte_end":266624,"line_start":54,"line_end":54,"column_start":12,"column_end":30},"name":"SubCapturesPosIter","qualname":"::re_trait::SubCapturesPosIter","value":"SubCapturesPosIter {  }","parent":null,"children":[{"krate":0,"index":792},{"krate":0,"index":793}],"decl_id":null,"docs":" An iterator over capture group positions for a particular match of a\n regular expression.","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":798},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/re_trait.rs","byte_start":267796,"byte_end":267813,"line_start":87,"line_end":87,"column_start":11,"column_end":28},"name":"RegularExpression","qualname":"::re_trait::RegularExpression","value":"RegularExpression: Sized","parent":null,"children":[{"krate":0,"index":799},{"krate":0,"index":800},{"krate":0,"index":801},{"krate":0,"index":802},{"krate":0,"index":803},{"krate":0,"index":804},{"krate":0,"index":805},{"krate":0,"index":806},{"krate":0,"index":807},{"krate":0,"index":808}],"decl_id":null,"docs":" `RegularExpression` describes types that can implement regex searching.","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":799},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/re_trait.rs","byte_start":267866,"byte_end":267870,"line_start":89,"line_end":89,"column_start":10,"column_end":14},"name":"Text","qualname":"::re_trait::RegularExpression::Text","value":"type Text: ?Sized;","parent":{"krate":0,"index":798},"children":[],"decl_id":null,"docs":" The type of the haystack.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":800},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/re_trait.rs","byte_start":268045,"byte_end":268054,"line_start":93,"line_end":93,"column_start":8,"column_end":17},"name":"slots_len","qualname":"::re_trait::RegularExpression::slots_len","value":"fn (&self) -> usize","parent":{"krate":0,"index":798},"children":[],"decl_id":null,"docs":" The number of capture slots in the compiled regular expression. This is\n always two times the number of capture groups (two slots per group).\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":801},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/re_trait.rs","byte_start":268150,"byte_end":268159,"line_start":96,"line_end":96,"column_start":8,"column_end":17},"name":"locations","qualname":"::re_trait::RegularExpression::locations","value":"fn (&self) -> Locations","parent":{"krate":0,"index":798},"children":[],"decl_id":null,"docs":" Allocates fresh space for all capturing groups in this regex.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":802},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/re_trait.rs","byte_start":268505,"byte_end":268521,"line_start":105,"line_end":105,"column_start":8,"column_end":24},"name":"next_after_empty","qualname":"::re_trait::RegularExpression::next_after_empty","value":"fn (&self, text: &Self::Text, i: usize) -> usize","parent":{"krate":0,"index":798},"children":[],"decl_id":null,"docs":" Returns the position of the next character after `i`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":803},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/re_trait.rs","byte_start":268628,"byte_end":268645,"line_start":108,"line_end":108,"column_start":8,"column_end":25},"name":"shortest_match_at","qualname":"::re_trait::RegularExpression::shortest_match_at","value":"fn (&self, text: &Self::Text, start: usize) -> Option<usize>","parent":{"krate":0,"index":798},"children":[],"decl_id":null,"docs":" Returns the location of the shortest match.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":804},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/re_trait.rs","byte_start":268801,"byte_end":268812,"line_start":115,"line_end":115,"column_start":8,"column_end":19},"name":"is_match_at","qualname":"::re_trait::RegularExpression::is_match_at","value":"fn (&self, text: &Self::Text, start: usize) -> bool","parent":{"krate":0,"index":798},"children":[],"decl_id":null,"docs":" Returns whether the regex matches the text given.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":805},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/re_trait.rs","byte_start":268935,"byte_end":268942,"line_start":118,"line_end":118,"column_start":8,"column_end":15},"name":"find_at","qualname":"::re_trait::RegularExpression::find_at","value":"fn (&self, text: &Self::Text, start: usize) -> Option<(usize, usize)>","parent":{"krate":0,"index":798},"children":[],"decl_id":null,"docs":" Returns the leftmost-first match location if one exists.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":806},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/re_trait.rs","byte_start":269177,"byte_end":269193,"line_start":126,"line_end":126,"column_start":8,"column_end":24},"name":"captures_read_at","qualname":"::re_trait::RegularExpression::captures_read_at","value":"fn (&self, locs: &mut Locations, text: &Self::Text, start: usize) -> Option<(usize, usize)>","parent":{"krate":0,"index":798},"children":[],"decl_id":null,"docs":" Returns the leftmost-first match location if one exists, and also\n fills in any matching capture slot locations.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":807},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/re_trait.rs","byte_start":269426,"byte_end":269435,"line_start":135,"line_end":135,"column_start":8,"column_end":17},"name":"find_iter","qualname":"::re_trait::RegularExpression::find_iter","value":"fn (self, text: &Self::Text) -> Matches<Self>","parent":{"krate":0,"index":798},"children":[],"decl_id":null,"docs":" Returns an iterator over all non-overlapping successive leftmost-first\n matches.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":808},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/re_trait.rs","byte_start":269676,"byte_end":269689,"line_start":141,"line_end":141,"column_start":8,"column_end":21},"name":"captures_iter","qualname":"::re_trait::RegularExpression::captures_iter","value":"fn (self, text: &Self::Text) -> CaptureMatches<Self>","parent":{"krate":0,"index":798},"children":[],"decl_id":null,"docs":" Returns an iterator over all non-overlapping successive leftmost-first\n matches with captures.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":809},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/re_trait.rs","byte_start":269882,"byte_end":269889,"line_start":147,"line_end":147,"column_start":12,"column_end":19},"name":"Matches","qualname":"::re_trait::Matches","value":"Matches {  }","parent":null,"children":[{"krate":0,"index":812},{"krate":0,"index":813},{"krate":0,"index":814},{"krate":0,"index":815}],"decl_id":null,"docs":" An iterator over all non-overlapping successive leftmost-first matches.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":819},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/re_trait.rs","byte_start":270166,"byte_end":270170,"line_start":164,"line_end":164,"column_start":12,"column_end":16},"name":"text","qualname":"<Matches>::text","value":"fn (&self) -> &'t R::Text","parent":null,"children":[],"decl_id":null,"docs":" Return the text being searched.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":820},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/re_trait.rs","byte_start":270268,"byte_end":270273,"line_start":169,"line_end":169,"column_start":12,"column_end":17},"name":"regex","qualname":"<Matches>::regex","value":"fn (&self) -> &R","parent":null,"children":[],"decl_id":null,"docs":" Return the underlying regex.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":826},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/re_trait.rs","byte_start":271474,"byte_end":271488,"line_start":209,"line_end":209,"column_start":12,"column_end":26},"name":"CaptureMatches","qualname":"::re_trait::CaptureMatches","value":"","parent":null,"children":[],"decl_id":null,"docs":" An iterator over all non-overlapping successive leftmost-first matches with\n captures.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":834},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/re_trait.rs","byte_start":271698,"byte_end":271702,"line_start":220,"line_end":220,"column_start":12,"column_end":16},"name":"text","qualname":"<CaptureMatches>::text","value":"fn (&self) -> &'t R::Text","parent":null,"children":[],"decl_id":null,"docs":" Return the text being searched.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":835},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/re_trait.rs","byte_start":271804,"byte_end":271809,"line_start":225,"line_end":225,"column_start":12,"column_end":17},"name":"regex","qualname":"<CaptureMatches>::regex","value":"fn (&self) -> &R","parent":null,"children":[],"decl_id":null,"docs":" Return the underlying regex.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":862},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/re_unicode.rs","byte_start":273235,"byte_end":273241,"line_start":21,"line_end":21,"column_start":8,"column_end":14},"name":"escape","qualname":"::re_unicode::escape","value":"fn (text: &str) -> String","parent":null,"children":[],"decl_id":null,"docs":" Escapes all regular expression meta characters in `text`.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1905},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/re_unicode.rs","byte_start":273492,"byte_end":273497,"line_start":29,"line_end":29,"column_start":12,"column_end":17},"name":"Match","qualname":"::re_unicode::Match","value":"Match {  }","parent":null,"children":[{"krate":0,"index":1907},{"krate":0,"index":1908},{"krate":0,"index":1909}],"decl_id":null,"docs":" Match represents a single match of a regex in a haystack.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":865},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/re_unicode.rs","byte_start":273677,"byte_end":273682,"line_start":38,"line_end":38,"column_start":12,"column_end":17},"name":"start","qualname":"<Match>::start","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the starting byte offset of the match in the haystack.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/re_unicode.rs","byte_start":273656,"byte_end":273665,"line_start":37,"line_end":37,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":866},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/re_unicode.rs","byte_start":273821,"byte_end":273824,"line_start":44,"line_end":44,"column_start":12,"column_end":15},"name":"end","qualname":"<Match>::end","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the ending byte offset of the match in the haystack.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/re_unicode.rs","byte_start":273800,"byte_end":273809,"line_start":43,"line_end":43,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":867},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/re_unicode.rs","byte_start":273998,"byte_end":274003,"line_start":51,"line_end":51,"column_start":12,"column_end":17},"name":"range","qualname":"<Match>::range","value":"fn (&self) -> Range<usize>","parent":null,"children":[],"decl_id":null,"docs":" Returns the range over the starting and ending byte offsets of the\n match in the haystack.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/re_unicode.rs","byte_start":273977,"byte_end":273986,"line_start":50,"line_end":50,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":868},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/re_unicode.rs","byte_start":274124,"byte_end":274130,"line_start":57,"line_end":57,"column_start":12,"column_end":18},"name":"as_str","qualname":"<Match>::as_str","value":"fn (&self) -> &'t str","parent":null,"children":[],"decl_id":null,"docs":" Returns the matched text.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/re_unicode.rs","byte_start":274103,"byte_end":274112,"line_start":56,"line_end":56,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":1929},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/re_unicode.rs","byte_start":276897,"byte_end":276902,"line_start":136,"line_end":136,"column_start":12,"column_end":17},"name":"Regex","qualname":"::re_unicode::Regex","value":"","parent":null,"children":[],"decl_id":null,"docs":" A compiled regular expression for matching Unicode strings.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":886},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/re_unicode.rs","byte_start":277844,"byte_end":277847,"line_start":174,"line_end":174,"column_start":12,"column_end":15},"name":"new","qualname":"<Regex>::new","value":"fn (re: &str) -> Result<Regex, Error>","parent":null,"children":[],"decl_id":null,"docs":" Compiles a regular expression. Once compiled, it can be used repeatedly\n to search, split or replace text in a string.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":887},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/re_unicode.rs","byte_start":278577,"byte_end":278585,"line_start":196,"line_end":196,"column_start":12,"column_end":20},"name":"is_match","qualname":"<Regex>::is_match","value":"fn (&self, text: &str) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if and only if the regex matches the string given.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":888},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/re_unicode.rs","byte_start":279461,"byte_end":279465,"line_start":221,"line_end":221,"column_start":12,"column_end":16},"name":"find","qualname":"<Regex>::find","value":"fn <'t> (&self, text: &'t str) -> Option<Match<'t>>","parent":null,"children":[],"decl_id":null,"docs":" Returns the start and end byte range of the leftmost-first match in\n `text`. If no match exists, then `None` is returned.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":890},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/re_unicode.rs","byte_start":280179,"byte_end":280188,"line_start":243,"line_end":243,"column_start":12,"column_end":21},"name":"find_iter","qualname":"<Regex>::find_iter","value":"fn <'r, 't> (&'r self, text: &'t str) -> Matches<'r, 't>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator for each successive non-overlapping match in\n `text`, returning the start and end byte indices with respect to\n `text`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":893},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/re_unicode.rs","byte_start":283268,"byte_end":283276,"line_start":310,"line_end":310,"column_start":12,"column_end":20},"name":"captures","qualname":"<Regex>::captures","value":"fn <'t> (&self, text: &'t str) -> Option<Captures<'t>>","parent":null,"children":[],"decl_id":null,"docs":" Returns the capture groups corresponding to the leftmost-first\n match in `text`. Capture group `0` always corresponds to the entire\n match. If no match is found, then `None` is returned.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":896},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/re_unicode.rs","byte_start":284609,"byte_end":284622,"line_start":344,"line_end":344,"column_start":12,"column_end":25},"name":"captures_iter","qualname":"<Regex>::captures_iter","value":"fn <'r, 't> (&'r self, text: &'t str) -> CaptureMatches<'r, 't>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over all the non-overlapping capture groups matched\n in `text`. This is operationally the same as `find_iter`, except it\n yields information about capturing group matches.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":899},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/re_unicode.rs","byte_start":285481,"byte_end":285486,"line_start":369,"line_end":369,"column_start":12,"column_end":17},"name":"split","qualname":"<Regex>::split","value":"fn <'r, 't> (&'r self, text: &'t str) -> Split<'r, 't>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator of substrings of `text` delimited by a match of the\n regular expression. Namely, each element of the iterator corresponds to\n text that *isn't* matched by the regular expression.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":902},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/re_unicode.rs","byte_start":286441,"byte_end":286447,"line_start":393,"line_end":393,"column_start":12,"column_end":18},"name":"splitn","qualname":"<Regex>::splitn","value":"fn <'r, 't> (&'r self, text: &'t str, limit: usize) -> SplitN<'r, 't>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator of at most `limit` substrings of `text` delimited\n by a match of the regular expression. (A `limit` of `0` will return no\n substrings.) Namely, each element of the iterator corresponds to text\n that *isn't* matched by the regular expression. The remainder of the\n string that is not split will be the last element in the iterator.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":905},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/re_unicode.rs","byte_start":290957,"byte_end":290964,"line_start":505,"line_end":505,"column_start":12,"column_end":19},"name":"replace","qualname":"<Regex>::replace","value":"fn <'t, R> (&self, text: &'t str, rep: R) -> Cow<'t, str>","parent":null,"children":[],"decl_id":null,"docs":" Replaces the leftmost-first match with the replacement provided.\n The replacement can be a regular string (where `$N` and `$name` are\n expanded to match capture groups) or a function that takes the matches'\n `Captures` and returns the replaced string.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":908},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/re_unicode.rs","byte_start":291421,"byte_end":291432,"line_start":519,"line_end":519,"column_start":12,"column_end":23},"name":"replace_all","qualname":"<Regex>::replace_all","value":"fn <'t, R> (&self, text: &'t str, rep: R) -> Cow<'t, str>","parent":null,"children":[],"decl_id":null,"docs":" Replaces all non-overlapping matches in `text` with the replacement\n provided. This is the same as calling `replacen` with `limit` set to\n `0`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":911},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/re_unicode.rs","byte_start":291901,"byte_end":291909,"line_start":533,"line_end":533,"column_start":12,"column_end":20},"name":"replacen","qualname":"<Regex>::replacen","value":"fn <'t, R> (&self, text: &'t str, limit: usize, mut rep: R) -> Cow<'t, str>","parent":null,"children":[],"decl_id":null,"docs":" Replaces at most `limit` non-overlapping matches in `text` with the\n replacement provided. If `limit` is 0, then all non-overlapping matches\n are replaced.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":915},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/re_unicode.rs","byte_start":294867,"byte_end":294881,"line_start":613,"line_end":613,"column_start":12,"column_end":26},"name":"shortest_match","qualname":"<Regex>::shortest_match","value":"fn (&self, text: &str) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":" Returns the end location of a match in the text given.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":916},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/re_unicode.rs","byte_start":295268,"byte_end":295285,"line_start":623,"line_end":623,"column_start":12,"column_end":29},"name":"shortest_match_at","qualname":"<Regex>::shortest_match_at","value":"fn (&self, text: &str, start: usize) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":" Returns the same as shortest_match, but starts the search at the given\n offset.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":917},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/re_unicode.rs","byte_start":295732,"byte_end":295743,"line_start":637,"line_end":637,"column_start":12,"column_end":23},"name":"is_match_at","qualname":"<Regex>::is_match_at","value":"fn (&self, text: &str, start: usize) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns the same as is_match, but starts the search at the given\n offset.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":918},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/re_unicode.rs","byte_start":296139,"byte_end":296146,"line_start":647,"line_end":647,"column_start":12,"column_end":19},"name":"find_at","qualname":"<Regex>::find_at","value":"fn <'t> (&self, text: &'t str, start: usize) -> Option<Match<'t>>","parent":null,"children":[],"decl_id":null,"docs":" Returns the same as find, but starts the search at the given\n offset.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":921},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/re_unicode.rs","byte_start":296823,"byte_end":296836,"line_start":668,"line_end":668,"column_start":12,"column_end":25},"name":"captures_read","qualname":"<Regex>::captures_read","value":"fn <'t> (&self, locs: &mut CaptureLocations, text: &'t str) -> Option<Match<'t>>","parent":null,"children":[],"decl_id":null,"docs":" This is like `captures`, but uses\n [`CaptureLocations`](struct.CaptureLocations.html)\n instead of\n [`Captures`](struct.Captures.html) in order to amortize allocations.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":923},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/re_unicode.rs","byte_start":297335,"byte_end":297351,"line_start":682,"line_end":682,"column_start":12,"column_end":28},"name":"captures_read_at","qualname":"<Regex>::captures_read_at","value":"fn <'t> (&self, locs: &mut CaptureLocations, text: &'t str, start: usize) -> Option<Match<'t>>","parent":null,"children":[],"decl_id":null,"docs":" Returns the same as captures, but starts the search at the given\n offset and populates the capture locations given.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":926},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/re_unicode.rs","byte_start":297899,"byte_end":297915,"line_start":700,"line_end":700,"column_start":12,"column_end":28},"name":"read_captures_at","qualname":"<Regex>::read_captures_at","value":"fn <'t> (&self, locs: &mut CaptureLocations, text: &'t str, start: usize) -> Option<Match<'t>>","parent":null,"children":[],"decl_id":null,"docs":" An undocumented alias for `captures_read_at`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":929},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/re_unicode.rs","byte_start":298203,"byte_end":298209,"line_start":713,"line_end":713,"column_start":12,"column_end":18},"name":"as_str","qualname":"<Regex>::as_str","value":"fn (&self) -> &str","parent":null,"children":[],"decl_id":null,"docs":" Returns the original string of this regex.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":930},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/re_unicode.rs","byte_start":298332,"byte_end":298345,"line_start":718,"line_end":718,"column_start":12,"column_end":25},"name":"capture_names","qualname":"<Regex>::capture_names","value":"fn (&self) -> CaptureNames","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over the capture names.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":931},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/re_unicode.rs","byte_start":298481,"byte_end":298493,"line_start":723,"line_end":723,"column_start":12,"column_end":24},"name":"captures_len","qualname":"<Regex>::captures_len","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of captures.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":932},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/re_unicode.rs","byte_start":298704,"byte_end":298721,"line_start":729,"line_end":729,"column_start":12,"column_end":29},"name":"capture_locations","qualname":"<Regex>::capture_locations","value":"fn (&self) -> CaptureLocations","parent":null,"children":[],"decl_id":null,"docs":" Returns an empty set of capture locations that can be reused in\n multiple calls to `captures_read` or `captures_read_at`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":933},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/re_unicode.rs","byte_start":299072,"byte_end":299081,"line_start":738,"line_end":738,"column_start":12,"column_end":21},"name":"locations","qualname":"<Regex>::locations","value":"fn (&self) -> CaptureLocations","parent":null,"children":[],"decl_id":null,"docs":" An alias for `capture_locations` to preserve backward compatibility.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":934},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/re_unicode.rs","byte_start":299437,"byte_end":299449,"line_start":749,"line_end":749,"column_start":12,"column_end":24},"name":"CaptureNames","qualname":"::re_unicode::CaptureNames","value":"","parent":null,"children":[],"decl_id":null,"docs":" An iterator over the names of all possible captures.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":945},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/re_unicode.rs","byte_start":300038,"byte_end":300043,"line_start":770,"line_end":770,"column_start":12,"column_end":17},"name":"Split","qualname":"::re_unicode::Split","value":"Split {  }","parent":null,"children":[{"krate":0,"index":948},{"krate":0,"index":949}],"decl_id":null,"docs":" Yields all substrings delimited by a regular expression match.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":955},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/re_unicode.rs","byte_start":301052,"byte_end":301058,"line_start":805,"line_end":805,"column_start":12,"column_end":18},"name":"SplitN","qualname":"::re_unicode::SplitN","value":"SplitN {  }","parent":null,"children":[{"krate":0,"index":958},{"krate":0,"index":959}],"decl_id":null,"docs":" Yields at most `N` substrings delimited by a regular expression match.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1934},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/re_unicode.rs","byte_start":302467,"byte_end":302483,"line_start":850,"line_end":850,"column_start":12,"column_end":28},"name":"CaptureLocations","qualname":"::re_unicode::CaptureLocations","value":"","parent":null,"children":[],"decl_id":null,"docs":" CaptureLocations is a low level representation of the raw offsets of each\n submatch.","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":965},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/re_unicode.rs","byte_start":302805,"byte_end":302814,"line_start":858,"line_end":858,"column_start":10,"column_end":19},"name":"Locations","qualname":"::re_unicode::Locations","value":"CaptureLocations","parent":null,"children":[],"decl_id":null,"docs":" A type alias for `CaptureLocations` for backwards compatibility.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":967},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/re_unicode.rs","byte_start":303172,"byte_end":303175,"line_start":866,"line_end":866,"column_start":12,"column_end":15},"name":"get","qualname":"<CaptureLocations>::get","value":"fn (&self, i: usize) -> Option<(usize, usize)>","parent":null,"children":[],"decl_id":null,"docs":" Returns the start and end positions of the Nth capture group. Returns\n `None` if `i` is not a valid capture group or if the capture group did\n not match anything. The positions returned are *always* byte indices\n with respect to the original string matched.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/re_unicode.rs","byte_start":303151,"byte_end":303160,"line_start":865,"line_end":865,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":968},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/re_unicode.rs","byte_start":303470,"byte_end":303473,"line_start":875,"line_end":875,"column_start":12,"column_end":15},"name":"len","qualname":"<CaptureLocations>::len","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the total number of capturing groups.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/re_unicode.rs","byte_start":303449,"byte_end":303458,"line_start":874,"line_end":874,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":969},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/re_unicode.rs","byte_start":303833,"byte_end":303836,"line_start":886,"line_end":886,"column_start":12,"column_end":15},"name":"pos","qualname":"<CaptureLocations>::pos","value":"fn (&self, i: usize) -> Option<(usize, usize)>","parent":null,"children":[],"decl_id":null,"docs":" An alias for the `get` method for backwards compatibility.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/re_unicode.rs","byte_start":303812,"byte_end":303821,"line_start":885,"line_end":885,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":970},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/re_unicode.rs","byte_start":304460,"byte_end":304468,"line_start":902,"line_end":902,"column_start":12,"column_end":20},"name":"Captures","qualname":"::re_unicode::Captures","value":"Captures {  }","parent":null,"children":[{"krate":0,"index":972},{"krate":0,"index":973},{"krate":0,"index":974}],"decl_id":null,"docs":" Captures represents a group of captured strings for a single match.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":977},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/re_unicode.rs","byte_start":305366,"byte_end":305369,"line_start":928,"line_end":928,"column_start":12,"column_end":15},"name":"get","qualname":"<Captures>::get","value":"fn (&self, i: usize) -> Option<Match<'t>>","parent":null,"children":[],"decl_id":null,"docs":" Returns the match associated with the capture group at index `i`. If\n `i` does not correspond to a capture group, or if the capture group\n did not participate in the match, then `None` is returned.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":979},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/re_unicode.rs","byte_start":305654,"byte_end":305658,"line_start":934,"line_end":934,"column_start":12,"column_end":16},"name":"name","qualname":"<Captures>::name","value":"fn (&self, name: &str) -> Option<Match<'t>>","parent":null,"children":[],"decl_id":null,"docs":" Returns the match for the capture group named `name`. If `name` isn't a\n valid capture group or didn't match anything, then `None` is returned.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":981},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/re_unicode.rs","byte_start":306090,"byte_end":306094,"line_start":943,"line_end":943,"column_start":12,"column_end":16},"name":"iter","qualname":"<Captures>::iter","value":"fn <'c> (&'c self) -> SubCaptureMatches<'c, 't>","parent":null,"children":[],"decl_id":null,"docs":" An iterator that yields all capturing matches in the order in which\n they appear in the regex. If a particular capture group didn't\n participate in the match, then `None` is yielded for that capture.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":983},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/re_unicode.rs","byte_start":307105,"byte_end":307111,"line_start":963,"line_end":963,"column_start":12,"column_end":18},"name":"expand","qualname":"<Captures>::expand","value":"fn (&self, replacement: &str, dst: &mut String) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Expands all instances of `$name` in `replacement` to the corresponding\n capture group `name`, and writes them to the `dst` buffer given.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":984},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/re_unicode.rs","byte_start":307418,"byte_end":307421,"line_start":972,"line_end":972,"column_start":12,"column_end":15},"name":"len","qualname":"<Captures>::len","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of captured groups.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/re_unicode.rs","byte_start":307397,"byte_end":307406,"line_start":971,"line_end":971,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":1013},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/re_unicode.rs","byte_start":310125,"byte_end":310142,"line_start":1056,"line_end":1056,"column_start":12,"column_end":29},"name":"SubCaptureMatches","qualname":"::re_unicode::SubCaptureMatches","value":"SubCaptureMatches {  }","parent":null,"children":[{"krate":0,"index":1016},{"krate":0,"index":1017}],"decl_id":null,"docs":" An iterator that yields all capturing matches in the order in which they\n appear in the regex.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1025},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/re_unicode.rs","byte_start":310782,"byte_end":310796,"line_start":1078,"line_end":1078,"column_start":12,"column_end":26},"name":"CaptureMatches","qualname":"::re_unicode::CaptureMatches","value":"","parent":null,"children":[],"decl_id":null,"docs":" An iterator that yields all non-overlapping capture groups matching a\n particular regular expression.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1036},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/re_unicode.rs","byte_start":311488,"byte_end":311495,"line_start":1101,"line_end":1101,"column_start":12,"column_end":19},"name":"Matches","qualname":"::re_unicode::Matches","value":"","parent":null,"children":[],"decl_id":null,"docs":" An iterator over all non-overlapping matches for a particular string.","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":1047},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/re_unicode.rs","byte_start":312120,"byte_end":312128,"line_start":1118,"line_end":1118,"column_start":11,"column_end":19},"name":"Replacer","qualname":"::re_unicode::Replacer","value":"Replacer","parent":null,"children":[{"krate":0,"index":1048},{"krate":0,"index":1049},{"krate":0,"index":1051}],"decl_id":null,"docs":" Replacer describes types that can be used to replace matches in a string.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1048},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/re_unicode.rs","byte_start":312435,"byte_end":312449,"line_start":1126,"line_end":1126,"column_start":8,"column_end":22},"name":"replace_append","qualname":"::re_unicode::Replacer::replace_append","value":"fn (&mut self, caps: &Captures, dst: &mut String) -> ()","parent":{"krate":0,"index":1047},"children":[],"decl_id":null,"docs":" Appends text to `dst` to replace the current match.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1049},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/re_unicode.rs","byte_start":312854,"byte_end":312866,"line_start":1135,"line_end":1135,"column_start":8,"column_end":20},"name":"no_expansion","qualname":"::re_unicode::Replacer::no_expansion","value":"fn <'r> (&'r mut self) -> Option<Cow<'r, str>>","parent":{"krate":0,"index":1047},"children":[],"decl_id":null,"docs":" Return a fixed unchanging replacement string.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1051},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/re_unicode.rs","byte_start":313587,"byte_end":313593,"line_start":1160,"line_end":1160,"column_start":8,"column_end":14},"name":"by_ref","qualname":"::re_unicode::Replacer::by_ref","value":"fn <'r> (&'r mut self) -> ReplacerRef<'r, Self>","parent":{"krate":0,"index":1047},"children":[],"decl_id":null,"docs":" Return a `Replacer` that borrows and wraps this `Replacer`.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1941},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/re_unicode.rs","byte_start":313821,"byte_end":313832,"line_start":1169,"line_end":1169,"column_start":12,"column_end":23},"name":"ReplacerRef","qualname":"::re_unicode::ReplacerRef","value":"","parent":null,"children":[],"decl_id":null,"docs":" By-reference adaptor for a `Replacer`","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1066},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/re_unicode.rs","byte_start":315102,"byte_end":315110,"line_start":1211,"line_end":1211,"column_start":12,"column_end":20},"name":"NoExpand","qualname":"::re_unicode::NoExpand","value":"","parent":null,"children":[],"decl_id":null,"docs":" `NoExpand` indicates literal string replacement.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1950},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/sparse.rs","byte_start":315991,"byte_end":316000,"line_start":15,"line_end":15,"column_start":12,"column_end":21},"name":"SparseSet","qualname":"::sparse::SparseSet","value":"SparseSet {  }","parent":null,"children":[{"krate":0,"index":1951},{"krate":0,"index":1952}],"decl_id":null,"docs":" A sparse set used for representing ordered NFA states.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1078},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/sparse.rs","byte_start":316379,"byte_end":316382,"line_start":27,"line_end":27,"column_start":12,"column_end":15},"name":"new","qualname":"<SparseSet>::new","value":"fn (size: usize) -> SparseSet","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1079},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/sparse.rs","byte_start":316558,"byte_end":316561,"line_start":34,"line_end":34,"column_start":12,"column_end":15},"name":"len","qualname":"<SparseSet>::len","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1080},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/sparse.rs","byte_start":316623,"byte_end":316631,"line_start":38,"line_end":38,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<SparseSet>::is_empty","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1081},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/sparse.rs","byte_start":316697,"byte_end":316705,"line_start":42,"line_end":42,"column_start":12,"column_end":20},"name":"capacity","qualname":"<SparseSet>::capacity","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1082},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/sparse.rs","byte_start":316772,"byte_end":316778,"line_start":46,"line_end":46,"column_start":12,"column_end":18},"name":"insert","qualname":"<SparseSet>::insert","value":"fn (&mut self, value: usize) -> ()","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1083},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/sparse.rs","byte_start":316954,"byte_end":316962,"line_start":53,"line_end":53,"column_start":12,"column_end":20},"name":"contains","qualname":"<SparseSet>::contains","value":"fn (&self, value: usize) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1084},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/sparse.rs","byte_start":317090,"byte_end":317095,"line_start":58,"line_end":58,"column_start":12,"column_end":17},"name":"clear","qualname":"<SparseSet>::clear","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":1106},"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/lib.rs","byte_start":28366,"byte_end":28374,"line_start":779,"line_end":779,"column_start":9,"column_end":17},"name":"internal","qualname":"::internal","value":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/lib.rs","parent":null,"children":[{"krate":0,"index":1107},{"krate":0,"index":1108},{"krate":0,"index":1111},{"krate":0,"index":1116},{"krate":0,"index":1117}],"decl_id":null,"docs":" The `internal` module exists to support suspicious activity, such as\n testing different matching engines and supporting the `regex-debug` CLI\n utility.\n","sig":null,"attributes":[{"value":"cfg(feature = \"std\")","span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/lib.rs","byte_start":28334,"byte_end":28357,"line_start":778,"line_end":778,"column_start":1,"column_end":24}}]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/backtrack.rs","byte_start":30861,"byte_end":30866,"line_start":60,"line_end":60,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":43}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Inherent","span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/backtrack.rs","byte_start":31528,"byte_end":31535,"line_start":79,"line_end":79,"column_start":32,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":50},{"krate":0,"index":51},{"krate":0,"index":52},{"krate":0,"index":53},{"krate":0,"index":54},{"krate":0,"index":56}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Inherent","span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/cache.rs","byte_start":41433,"byte_end":41439,"line_start":68,"line_end":68,"column_start":19,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":68},{"krate":0,"index":69},{"krate":0,"index":71}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Inherent","span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/cache.rs","byte_start":42070,"byte_end":42081,"line_start":87,"line_end":87,"column_start":23,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":75}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/cache.rs","byte_start":42216,"byte_end":42227,"line_start":93,"line_end":93,"column_start":32,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":79}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Inherent","span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/compile.rs","byte_start":43254,"byte_end":43262,"line_start":38,"line_end":38,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":116},{"krate":0,"index":117},{"krate":0,"index":118},{"krate":0,"index":119},{"krate":0,"index":120},{"krate":0,"index":121},{"krate":0,"index":122},{"krate":0,"index":123},{"krate":0,"index":124},{"krate":0,"index":127},{"krate":0,"index":129},{"krate":0,"index":132},{"krate":0,"index":133},{"krate":0,"index":134},{"krate":0,"index":135},{"krate":0,"index":137},{"krate":0,"index":138},{"krate":0,"index":139},{"krate":0,"index":140},{"krate":0,"index":143},{"krate":0,"index":144},{"krate":0,"index":146},{"krate":0,"index":147},{"krate":0,"index":148},{"krate":0,"index":149},{"krate":0,"index":150},{"krate":0,"index":151},{"krate":0,"index":152},{"krate":0,"index":153},{"krate":0,"index":154},{"krate":0,"index":155},{"krate":0,"index":156},{"krate":0,"index":157}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Inherent","span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/compile.rs","byte_start":70196,"byte_end":70205,"line_start":743,"line_end":743,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":160},{"krate":0,"index":161},{"krate":0,"index":162},{"krate":0,"index":163},{"krate":0,"index":164}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Inherent","span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/compile.rs","byte_start":72542,"byte_end":72550,"line_start":821,"line_end":821,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":166}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Inherent","span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/compile.rs","byte_start":73366,"byte_end":73378,"line_start":846,"line_end":846,"column_start":14,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":175},{"krate":0,"index":176},{"krate":0,"index":177}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Inherent","span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/compile.rs","byte_start":78130,"byte_end":78141,"line_start":977,"line_end":977,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":184},{"krate":0,"index":185},{"krate":0,"index":186},{"krate":0,"index":187}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Inherent","span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/compile.rs","byte_start":79350,"byte_end":79362,"line_start":1016,"line_end":1016,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":194},{"krate":0,"index":196},{"krate":0,"index":197},{"krate":0,"index":198}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/error.rs","byte_start":83138,"byte_end":83143,"line_start":21,"line_end":21,"column_start":30,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":204}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/error.rs","byte_start":83513,"byte_end":83518,"line_start":33,"line_end":33,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":206}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/error.rs","byte_start":84175,"byte_end":84180,"line_start":51,"line_end":51,"column_start":21,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":208}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Inherent","span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/exec.rs","byte_start":88974,"byte_end":88985,"line_start":116,"line_end":116,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":255},{"krate":0,"index":256},{"krate":0,"index":260},{"krate":0,"index":261},{"krate":0,"index":262},{"krate":0,"index":263},{"krate":0,"index":264},{"krate":0,"index":265},{"krate":0,"index":266},{"krate":0,"index":267},{"krate":0,"index":271}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/exec.rs","byte_start":98688,"byte_end":98701,"line_start":372,"line_end":372,"column_start":32,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":274},{"krate":0,"index":275},{"krate":0,"index":276},{"krate":0,"index":277},{"krate":0,"index":278},{"krate":0,"index":279},{"krate":0,"index":280}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/exec.rs","byte_start":99775,"byte_end":99785,"line_start":409,"line_end":409,"column_start":32,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":283},{"krate":0,"index":284},{"krate":0,"index":285},{"krate":0,"index":286},{"krate":0,"index":287},{"krate":0,"index":288},{"krate":0,"index":289}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Inherent","span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/exec.rs","byte_start":110369,"byte_end":110379,"line_start":676,"line_end":676,"column_start":10,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":293},{"krate":0,"index":294},{"krate":0,"index":295},{"krate":0,"index":296},{"krate":0,"index":297},{"krate":0,"index":299},{"krate":0,"index":300},{"krate":0,"index":301},{"krate":0,"index":303},{"krate":0,"index":305}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Inherent","span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/exec.rs","byte_start":127621,"byte_end":127634,"line_start":1242,"line_end":1242,"column_start":10,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":308}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Inherent","span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/exec.rs","byte_start":127758,"byte_end":127762,"line_start":1248,"line_end":1248,"column_start":6,"column_end":10},"value":"","parent":null,"children":[{"krate":0,"index":310},{"krate":0,"index":312},{"krate":0,"index":313},{"krate":0,"index":314},{"krate":0,"index":315},{"krate":0,"index":316},{"krate":0,"index":317},{"krate":0,"index":318},{"krate":0,"index":319}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/exec.rs","byte_start":129593,"byte_end":129597,"line_start":1305,"line_end":1305,"column_start":16,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":321}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Inherent","span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/exec.rs","byte_start":129703,"byte_end":129715,"line_start":1311,"line_end":1311,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":323},{"krate":0,"index":324},{"krate":0,"index":326}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Inherent","span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/exec.rs","byte_start":137031,"byte_end":137048,"line_start":1510,"line_end":1510,"column_start":6,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":330}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/expand.rs","byte_start":144070,"byte_end":144073,"line_start":112,"line_end":112,"column_start":28,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":346}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/expand.rs","byte_start":144169,"byte_end":144172,"line_start":118,"line_end":118,"column_start":22,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":348}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Inherent","span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/input.rs","byte_start":148230,"byte_end":148237,"line_start":22,"line_end":22,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":370},{"krate":0,"index":371},{"krate":0,"index":372},{"krate":0,"index":373},{"krate":0,"index":374},{"krate":0,"index":375},{"krate":0,"index":376},{"krate":0,"index":377}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Inherent","span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/input.rs","byte_start":151385,"byte_end":151394,"line_start":144,"line_end":144,"column_start":10,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":399}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/input.rs","byte_start":151568,"byte_end":151577,"line_start":151,"line_end":151,"column_start":25,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":402},{"krate":0,"index":403}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Direct","span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/input.rs","byte_start":151683,"byte_end":151692,"line_start":159,"line_end":159,"column_start":20,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":406},{"krate":0,"index":408},{"krate":0,"index":409},{"krate":0,"index":411},{"krate":0,"index":413},{"krate":0,"index":415},{"krate":0,"index":416}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Inherent","span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/input.rs","byte_start":153894,"byte_end":153903,"line_start":233,"line_end":233,"column_start":10,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":419}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Direct","span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/input.rs","byte_start":154132,"byte_end":154141,"line_start":240,"line_end":240,"column_start":25,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":422},{"krate":0,"index":423}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Direct","span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/input.rs","byte_start":154250,"byte_end":154259,"line_start":248,"line_end":248,"column_start":20,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":426},{"krate":0,"index":427},{"krate":0,"index":429},{"krate":0,"index":431},{"krate":0,"index":433},{"krate":0,"index":435},{"krate":0,"index":436}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Direct","span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/input.rs","byte_start":157661,"byte_end":157665,"line_start":350,"line_end":350,"column_start":21,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":438}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Inherent","span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/input.rs","byte_start":157875,"byte_end":157879,"line_start":359,"line_end":359,"column_start":6,"column_end":10},"value":"","parent":null,"children":[{"krate":0,"index":440},{"krate":0,"index":441},{"krate":0,"index":443},{"krate":0,"index":444}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Direct","span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/input.rs","byte_start":159120,"byte_end":159124,"line_start":396,"line_end":396,"column_start":21,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":446}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Direct","span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/input.rs","byte_start":159218,"byte_end":159222,"line_start":402,"line_end":402,"column_start":29,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":448}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Direct","span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/input.rs","byte_start":159345,"byte_end":159349,"line_start":408,"line_end":408,"column_start":26,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":451}],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Direct","span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/input.rs","byte_start":159602,"byte_end":159606,"line_start":422,"line_end":422,"column_start":27,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":455}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Inherent","span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/literal/mod.rs","byte_start":160154,"byte_end":160169,"line_start":14,"line_end":14,"column_start":10,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":463},{"krate":0,"index":464},{"krate":0,"index":465},{"krate":0,"index":466},{"krate":0,"index":467},{"krate":0,"index":468},{"krate":0,"index":469},{"krate":0,"index":470},{"krate":0,"index":471},{"krate":0,"index":472}],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Inherent","span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/pikevm.rs","byte_start":163669,"byte_end":163674,"line_start":75,"line_end":75,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":485}],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Inherent","span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/pikevm.rs","byte_start":163923,"byte_end":163926,"line_start":83,"line_end":83,"column_start":20,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":489},{"krate":0,"index":490},{"krate":0,"index":492},{"krate":0,"index":494},{"krate":0,"index":495}],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Inherent","span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/pikevm.rs","byte_start":173101,"byte_end":173108,"line_start":342,"line_end":342,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":498},{"krate":0,"index":499},{"krate":0,"index":500}],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Inherent","span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/prog.rs","byte_start":176879,"byte_end":176886,"line_start":77,"line_end":77,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":513},{"krate":0,"index":514},{"krate":0,"index":515},{"krate":0,"index":516},{"krate":0,"index":517},{"krate":0,"index":518},{"krate":0,"index":519}],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Direct","span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/prog.rs","byte_start":179867,"byte_end":179874,"line_start":161,"line_end":161,"column_start":16,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":521},{"krate":0,"index":522}],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Direct","span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/prog.rs","byte_start":180050,"byte_end":180057,"line_start":170,"line_end":170,"column_start":21,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":524}],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Inherent","span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/prog.rs","byte_start":185145,"byte_end":185149,"line_start":298,"line_end":298,"column_start":6,"column_end":10},"value":"","parent":null,"children":[{"krate":0,"index":536}],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Inherent","span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/prog.rs","byte_start":187540,"byte_end":187550,"line_start":380,"line_end":380,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":538},{"krate":0,"index":540}],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Inherent","span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/prog.rs","byte_start":189004,"byte_end":189013,"line_start":429,"line_end":429,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":543}],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Direct","span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/re_builder.rs","byte_start":189664,"byte_end":189676,"line_start":18,"line_end":18,"column_start":18,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":546}],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Inherent","span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/re_bytes.rs","byte_start":208649,"byte_end":208654,"line_start":26,"line_end":26,"column_start":10,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":571},{"krate":0,"index":572},{"krate":0,"index":573},{"krate":0,"index":574},{"krate":0,"index":575}],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Direct","span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/re_bytes.rs","byte_start":209525,"byte_end":209530,"line_start":59,"line_end":59,"column_start":30,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":578}],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Direct","span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/re_bytes.rs","byte_start":210324,"byte_end":210329,"line_start":79,"line_end":79,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":580}],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Direct","span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/re_bytes.rs","byte_start":210506,"byte_end":210511,"line_start":86,"line_end":86,"column_start":21,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":582}],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Direct","span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/re_bytes.rs","byte_start":210816,"byte_end":210821,"line_start":97,"line_end":97,"column_start":21,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":584}],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Direct","span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/re_bytes.rs","byte_start":210905,"byte_end":210910,"line_start":103,"line_end":103,"column_start":18,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":586},{"krate":0,"index":587}],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Inherent","span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/re_bytes.rs","byte_start":211121,"byte_end":211126,"line_start":113,"line_end":113,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":589},{"krate":0,"index":590},{"krate":0,"index":591},{"krate":0,"index":593},{"krate":0,"index":596},{"krate":0,"index":599},{"krate":0,"index":602},{"krate":0,"index":605},{"krate":0,"index":608},{"krate":0,"index":611},{"krate":0,"index":614}],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Inherent","span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/re_bytes.rs","byte_start":227578,"byte_end":227583,"line_start":532,"line_end":532,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":618},{"krate":0,"index":619},{"krate":0,"index":620},{"krate":0,"index":621},{"krate":0,"index":624},{"krate":0,"index":626},{"krate":0,"index":629}],"docs":"","sig":null,"attributes":[]},{"id":59,"kind":"Inherent","span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/re_bytes.rs","byte_start":231647,"byte_end":231652,"line_start":652,"line_end":652,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":632},{"krate":0,"index":633},{"krate":0,"index":634},{"krate":0,"index":635},{"krate":0,"index":636}],"docs":"","sig":null,"attributes":[]},{"id":60,"kind":"Direct","span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/re_bytes.rs","byte_start":233164,"byte_end":233171,"line_start":694,"line_end":694,"column_start":27,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":645},{"krate":0,"index":646}],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Direct","span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/re_bytes.rs","byte_start":233765,"byte_end":233779,"line_start":714,"line_end":714,"column_start":27,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":656},{"krate":0,"index":657}],"docs":"","sig":null,"attributes":[]},{"id":62,"kind":"Direct","span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/re_bytes.rs","byte_start":234354,"byte_end":234359,"line_start":735,"line_end":735,"column_start":27,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":667},{"krate":0,"index":668}],"docs":"","sig":null,"attributes":[]},{"id":63,"kind":"Direct","span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/re_bytes.rs","byte_start":235371,"byte_end":235377,"line_start":770,"line_end":770,"column_start":27,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":677},{"krate":0,"index":678}],"docs":"","sig":null,"attributes":[]},{"id":64,"kind":"Direct","span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/re_bytes.rs","byte_start":236269,"byte_end":236281,"line_start":802,"line_end":802,"column_start":23,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":685},{"krate":0,"index":686},{"krate":0,"index":689}],"docs":"","sig":null,"attributes":[]},{"id":65,"kind":"Inherent","span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/re_bytes.rs","byte_start":237735,"byte_end":237751,"line_start":843,"line_end":843,"column_start":6,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":692},{"krate":0,"index":693},{"krate":0,"index":694}],"docs":"","sig":null,"attributes":[]},{"id":66,"kind":"Inherent","span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/re_bytes.rs","byte_start":239489,"byte_end":239497,"line_start":891,"line_end":891,"column_start":10,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":702},{"krate":0,"index":704},{"krate":0,"index":706},{"krate":0,"index":708},{"krate":0,"index":709}],"docs":"","sig":null,"attributes":[]},{"id":67,"kind":"Direct","span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/re_bytes.rs","byte_start":242442,"byte_end":242450,"line_start":960,"line_end":960,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":712}],"docs":"","sig":null,"attributes":[]},{"id":68,"kind":"Direct","span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/re_bytes.rs","byte_start":242677,"byte_end":242690,"line_start":968,"line_end":968,"column_start":29,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":721}],"docs":"","sig":null,"attributes":[]},{"id":69,"kind":"Direct","span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/re_bytes.rs","byte_start":244181,"byte_end":244189,"line_start":1013,"line_end":1013,"column_start":27,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":729},{"krate":0,"index":730}],"docs":"","sig":null,"attributes":[]},{"id":70,"kind":"Direct","span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/re_bytes.rs","byte_start":244838,"byte_end":244846,"line_start":1035,"line_end":1035,"column_start":33,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":736},{"krate":0,"index":737}],"docs":"","sig":null,"attributes":[]},{"id":71,"kind":"Direct","span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/re_bytes.rs","byte_start":245643,"byte_end":245660,"line_start":1059,"line_end":1059,"column_start":27,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":749},{"krate":0,"index":750}],"docs":"","sig":null,"attributes":[]},{"id":72,"kind":"Direct","span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/re_bytes.rs","byte_start":248035,"byte_end":248046,"line_start":1129,"line_end":1129,"column_start":50,"column_end":61},"value":"","parent":null,"children":[{"krate":0,"index":762},{"krate":0,"index":763}],"docs":"","sig":null,"attributes":[]},{"id":73,"kind":"Direct","span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/re_bytes.rs","byte_start":248635,"byte_end":248636,"line_start":1151,"line_end":1151,"column_start":25,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":772}],"docs":"","sig":null,"attributes":[]},{"id":74,"kind":"Direct","span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/re_bytes.rs","byte_start":249300,"byte_end":249308,"line_start":1171,"line_end":1171,"column_start":23,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":779},{"krate":0,"index":780}],"docs":"","sig":null,"attributes":[]},{"id":75,"kind":"Inherent","span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/re_trait.rs","byte_start":265134,"byte_end":265143,"line_start":14,"line_end":14,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":786},{"krate":0,"index":787},{"krate":0,"index":788},{"krate":0,"index":789}],"docs":"","sig":null,"attributes":[]},{"id":76,"kind":"Direct","span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/re_trait.rs","byte_start":266697,"byte_end":266715,"line_start":59,"line_end":59,"column_start":23,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":796},{"krate":0,"index":797}],"docs":"","sig":null,"attributes":[]},{"id":77,"kind":"Inherent","span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/re_trait.rs","byte_start":270049,"byte_end":270056,"line_start":158,"line_end":158,"column_start":13,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":819},{"krate":0,"index":820}],"docs":"","sig":null,"attributes":[]},{"id":78,"kind":"Direct","span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/re_trait.rs","byte_start":270340,"byte_end":270347,"line_start":174,"line_end":174,"column_start":26,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":824},{"krate":0,"index":825}],"docs":"","sig":null,"attributes":[]},{"id":79,"kind":"Inherent","span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/re_trait.rs","byte_start":271574,"byte_end":271588,"line_start":214,"line_end":214,"column_start":13,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":834},{"krate":0,"index":835}],"docs":"","sig":null,"attributes":[]},{"id":80,"kind":"Direct","span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/re_trait.rs","byte_start":271882,"byte_end":271896,"line_start":230,"line_end":230,"column_start":26,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":839},{"krate":0,"index":840}],"docs":"","sig":null,"attributes":[]},{"id":81,"kind":"Inherent","span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/re_unicode.rs","byte_start":273569,"byte_end":273574,"line_start":35,"line_end":35,"column_start":10,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":865},{"krate":0,"index":866},{"krate":0,"index":867},{"krate":0,"index":868},{"krate":0,"index":869}],"docs":"","sig":null,"attributes":[]},{"id":82,"kind":"Direct","span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/re_unicode.rs","byte_start":274547,"byte_end":274552,"line_start":74,"line_end":74,"column_start":30,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":875}],"docs":"","sig":null,"attributes":[]},{"id":83,"kind":"Direct","span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/re_unicode.rs","byte_start":276933,"byte_end":276938,"line_start":138,"line_end":138,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":877}],"docs":"","sig":null,"attributes":[]},{"id":84,"kind":"Direct","span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/re_unicode.rs","byte_start":277115,"byte_end":277120,"line_start":145,"line_end":145,"column_start":21,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":879}],"docs":"","sig":null,"attributes":[]},{"id":85,"kind":"Direct","span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/re_unicode.rs","byte_start":277308,"byte_end":277313,"line_start":153,"line_end":153,"column_start":21,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":881}],"docs":"","sig":null,"attributes":[]},{"id":86,"kind":"Direct","span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/re_unicode.rs","byte_start":277397,"byte_end":277402,"line_start":159,"line_end":159,"column_start":18,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":883},{"krate":0,"index":884}],"docs":"","sig":null,"attributes":[]},{"id":87,"kind":"Inherent","span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/re_unicode.rs","byte_start":277613,"byte_end":277618,"line_start":169,"line_end":169,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":886},{"krate":0,"index":887},{"krate":0,"index":888},{"krate":0,"index":890},{"krate":0,"index":893},{"krate":0,"index":896},{"krate":0,"index":899},{"krate":0,"index":902},{"krate":0,"index":905},{"krate":0,"index":908},{"krate":0,"index":911}],"docs":"","sig":null,"attributes":[]},{"id":88,"kind":"Inherent","span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/re_unicode.rs","byte_start":294074,"byte_end":294079,"line_start":591,"line_end":591,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":915},{"krate":0,"index":916},{"krate":0,"index":917},{"krate":0,"index":918},{"krate":0,"index":921},{"krate":0,"index":923},{"krate":0,"index":926}],"docs":"","sig":null,"attributes":[]},{"id":89,"kind":"Inherent","span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/re_unicode.rs","byte_start":298133,"byte_end":298138,"line_start":711,"line_end":711,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":929},{"krate":0,"index":930},{"krate":0,"index":931},{"krate":0,"index":932},{"krate":0,"index":933}],"docs":"","sig":null,"attributes":[]},{"id":90,"kind":"Direct","span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/re_unicode.rs","byte_start":299518,"byte_end":299530,"line_start":751,"line_end":751,"column_start":23,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":940},{"krate":0,"index":941},{"krate":0,"index":944}],"docs":"","sig":null,"attributes":[]},{"id":91,"kind":"Direct","span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/re_unicode.rs","byte_start":300129,"byte_end":300134,"line_start":775,"line_end":775,"column_start":27,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":953},{"krate":0,"index":954}],"docs":"","sig":null,"attributes":[]},{"id":92,"kind":"Direct","span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/re_unicode.rs","byte_start":301139,"byte_end":301145,"line_start":810,"line_end":810,"column_start":27,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":963},{"krate":0,"index":964}],"docs":"","sig":null,"attributes":[]},{"id":93,"kind":"Inherent","span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/re_unicode.rs","byte_start":302841,"byte_end":302857,"line_start":860,"line_end":860,"column_start":6,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":967},{"krate":0,"index":968},{"krate":0,"index":969}],"docs":"","sig":null,"attributes":[]},{"id":94,"kind":"Inherent","span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/re_unicode.rs","byte_start":304584,"byte_end":304592,"line_start":908,"line_end":908,"column_start":10,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":977},{"krate":0,"index":979},{"krate":0,"index":981},{"krate":0,"index":983},{"krate":0,"index":984}],"docs":"","sig":null,"attributes":[]},{"id":95,"kind":"Direct","span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/re_unicode.rs","byte_start":307497,"byte_end":307505,"line_start":977,"line_end":977,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":987}],"docs":"","sig":null,"attributes":[]},{"id":96,"kind":"Direct","span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/re_unicode.rs","byte_start":307732,"byte_end":307745,"line_start":985,"line_end":985,"column_start":29,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":996}],"docs":"","sig":null,"attributes":[]},{"id":97,"kind":"Direct","span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/re_unicode.rs","byte_start":308792,"byte_end":308800,"line_start":1015,"line_end":1015,"column_start":27,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1001},{"krate":0,"index":1002}],"docs":"","sig":null,"attributes":[]},{"id":98,"kind":"Direct","span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/re_unicode.rs","byte_start":309445,"byte_end":309453,"line_start":1037,"line_end":1037,"column_start":33,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1008},{"krate":0,"index":1009}],"docs":"","sig":null,"attributes":[]},{"id":99,"kind":"Direct","span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/re_unicode.rs","byte_start":310246,"byte_end":310263,"line_start":1061,"line_end":1061,"column_start":27,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":1021},{"krate":0,"index":1022}],"docs":"","sig":null,"attributes":[]},{"id":100,"kind":"Direct","span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/re_unicode.rs","byte_start":310889,"byte_end":310903,"line_start":1082,"line_end":1082,"column_start":27,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1033},{"krate":0,"index":1034}],"docs":"","sig":null,"attributes":[]},{"id":101,"kind":"Direct","span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/re_unicode.rs","byte_start":311574,"byte_end":311581,"line_start":1103,"line_end":1103,"column_start":27,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1044},{"krate":0,"index":1045}],"docs":"","sig":null,"attributes":[]},{"id":102,"kind":"Direct","span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/re_unicode.rs","byte_start":313915,"byte_end":313926,"line_start":1171,"line_end":1171,"column_start":50,"column_end":61},"value":"","parent":null,"children":[{"krate":0,"index":1056},{"krate":0,"index":1057}],"docs":"","sig":null,"attributes":[]},{"id":103,"kind":"Direct","span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/re_unicode.rs","byte_start":314509,"byte_end":314510,"line_start":1193,"line_end":1193,"column_start":25,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1065}],"docs":"","sig":null,"attributes":[]},{"id":104,"kind":"Direct","span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/re_unicode.rs","byte_start":315152,"byte_end":315160,"line_start":1213,"line_end":1213,"column_start":23,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1072},{"krate":0,"index":1073}],"docs":"","sig":null,"attributes":[]},{"id":105,"kind":"Inherent","span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/sparse.rs","byte_start":316356,"byte_end":316365,"line_start":26,"line_end":26,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":1078},{"krate":0,"index":1079},{"krate":0,"index":1080},{"krate":0,"index":1081},{"krate":0,"index":1082},{"krate":0,"index":1083},{"krate":0,"index":1084}],"docs":"","sig":null,"attributes":[]},{"id":106,"kind":"Direct","span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/sparse.rs","byte_start":317161,"byte_end":317170,"line_start":63,"line_end":63,"column_start":16,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":1086},{"krate":0,"index":1087}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/backtrack.rs","byte_start":30861,"byte_end":30866,"line_start":60,"line_end":60,"column_start":6,"column_end":11},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":1140},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/backtrack.rs","byte_start":31528,"byte_end":31535,"line_start":79,"line_end":79,"column_start":32,"column_end":39},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":1122},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/cache.rs","byte_start":41433,"byte_end":41439,"line_start":68,"line_end":68,"column_start":19,"column_end":25},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":1159},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/cache.rs","byte_start":42070,"byte_end":42081,"line_start":87,"line_end":87,"column_start":23,"column_end":34},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":1166},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/cache.rs","byte_start":42216,"byte_end":42227,"line_start":93,"line_end":93,"column_start":32,"column_end":43},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":1166},"to":{"krate":2,"index":1726}},{"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/compile.rs","byte_start":43254,"byte_end":43262,"line_start":38,"line_end":38,"column_start":6,"column_end":14},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":106},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/compile.rs","byte_start":70196,"byte_end":70205,"line_start":743,"line_end":743,"column_start":6,"column_end":15},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":1191},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/compile.rs","byte_start":72542,"byte_end":72550,"line_start":821,"line_end":821,"column_start":6,"column_end":14},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":1210},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/compile.rs","byte_start":73366,"byte_end":73378,"line_start":846,"line_end":846,"column_start":14,"column_end":26},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":167},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/compile.rs","byte_start":78130,"byte_end":78141,"line_start":977,"line_end":977,"column_start":6,"column_end":17},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":180},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/compile.rs","byte_start":79350,"byte_end":79362,"line_start":1016,"line_end":1016,"column_start":6,"column_end":18},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":189},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/error.rs","byte_start":83138,"byte_end":83143,"line_start":21,"line_end":21,"column_start":30,"column_end":35},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":1267},"to":{"krate":1,"index":1616}},{"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/error.rs","byte_start":83513,"byte_end":83518,"line_start":33,"line_end":33,"column_start":23,"column_end":28},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":1267},"to":{"krate":2,"index":7641}},{"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/error.rs","byte_start":84175,"byte_end":84180,"line_start":51,"line_end":51,"column_start":21,"column_end":26},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":1267},"to":{"krate":2,"index":7636}},{"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/exec.rs","byte_start":88974,"byte_end":88985,"line_start":116,"line_end":116,"column_start":6,"column_end":17},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":244},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/exec.rs","byte_start":98688,"byte_end":98701,"line_start":372,"line_end":372,"column_start":32,"column_end":45},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":240},"to":{"krate":0,"index":798}},{"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/exec.rs","byte_start":99775,"byte_end":99785,"line_start":409,"line_end":409,"column_start":32,"column_end":42},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":1282},"to":{"krate":0,"index":798}},{"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/exec.rs","byte_start":110369,"byte_end":110379,"line_start":676,"line_end":676,"column_start":10,"column_end":20},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":1282},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/exec.rs","byte_start":127621,"byte_end":127634,"line_start":1242,"line_end":1242,"column_start":10,"column_end":23},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":240},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/exec.rs","byte_start":127758,"byte_end":127762,"line_start":1248,"line_end":1248,"column_start":6,"column_end":10},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":237},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/exec.rs","byte_start":129593,"byte_end":129597,"line_start":1305,"line_end":1305,"column_start":16,"column_end":20},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":237},"to":{"krate":2,"index":2181}},{"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/exec.rs","byte_start":129703,"byte_end":129715,"line_start":1311,"line_end":1311,"column_start":6,"column_end":18},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":1289},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/exec.rs","byte_start":137031,"byte_end":137048,"line_start":1510,"line_end":1510,"column_start":6,"column_end":23},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":1327},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/expand.rs","byte_start":144070,"byte_end":144073,"line_start":112,"line_end":112,"column_start":28,"column_end":31},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":1355},"to":{"krate":2,"index":2258}},{"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/expand.rs","byte_start":144169,"byte_end":144172,"line_start":118,"line_end":118,"column_start":22,"column_end":25},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":1355},"to":{"krate":2,"index":2258}},{"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/input.rs","byte_start":148230,"byte_end":148237,"line_start":22,"line_end":22,"column_start":6,"column_end":13},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":1382},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/input.rs","byte_start":149474,"byte_end":149479,"line_start":69,"line_end":69,"column_start":23,"column_end":28},"kind":"SuperTrait","from":{"krate":2,"index":7636},"to":{"krate":0,"index":378}},{"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/input.rs","byte_start":151385,"byte_end":151394,"line_start":144,"line_end":144,"column_start":10,"column_end":19},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":1392},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/input.rs","byte_start":151568,"byte_end":151577,"line_start":151,"line_end":151,"column_start":25,"column_end":34},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":1392},"to":{"krate":2,"index":1704}},{"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/input.rs","byte_start":151683,"byte_end":151692,"line_start":159,"line_end":159,"column_start":20,"column_end":29},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":1392},"to":{"krate":0,"index":378}},{"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/input.rs","byte_start":153894,"byte_end":153903,"line_start":233,"line_end":233,"column_start":10,"column_end":19},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":1404},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/input.rs","byte_start":154132,"byte_end":154141,"line_start":240,"line_end":240,"column_start":25,"column_end":34},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":1404},"to":{"krate":2,"index":1704}},{"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/input.rs","byte_start":154250,"byte_end":154259,"line_start":248,"line_end":248,"column_start":20,"column_end":29},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":1404},"to":{"krate":0,"index":378}},{"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/input.rs","byte_start":157661,"byte_end":157665,"line_start":350,"line_end":350,"column_start":21,"column_end":25},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":1416},"to":{"krate":2,"index":7636}},{"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/input.rs","byte_start":157875,"byte_end":157879,"line_start":359,"line_end":359,"column_start":6,"column_end":10},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":1416},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/input.rs","byte_start":159120,"byte_end":159124,"line_start":396,"line_end":396,"column_start":21,"column_end":25},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":1416},"to":{"krate":2,"index":2258}},{"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/input.rs","byte_start":159218,"byte_end":159222,"line_start":402,"line_end":402,"column_start":29,"column_end":33},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":1416},"to":{"krate":2,"index":2258}},{"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/input.rs","byte_start":159345,"byte_end":159349,"line_start":408,"line_end":408,"column_start":26,"column_end":30},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":1416},"to":{"krate":2,"index":2040}},{"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/input.rs","byte_start":159602,"byte_end":159606,"line_start":422,"line_end":422,"column_start":27,"column_end":31},"kind":{"Impl":{"id":38}},"from":{"krate":0,"index":1416},"to":{"krate":2,"index":2077}},{"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/literal/mod.rs","byte_start":160154,"byte_end":160169,"line_start":14,"line_end":14,"column_start":10,"column_end":25},"kind":{"Impl":{"id":40}},"from":{"krate":0,"index":1440},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/pikevm.rs","byte_start":163669,"byte_end":163674,"line_start":75,"line_end":75,"column_start":6,"column_end":11},"kind":{"Impl":{"id":41}},"from":{"krate":0,"index":1457},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/pikevm.rs","byte_start":163923,"byte_end":163926,"line_start":83,"line_end":83,"column_start":20,"column_end":23},"kind":{"Impl":{"id":42}},"from":{"krate":0,"index":1447},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/pikevm.rs","byte_start":173101,"byte_end":173108,"line_start":342,"line_end":342,"column_start":6,"column_end":13},"kind":{"Impl":{"id":43}},"from":{"krate":0,"index":1465},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/prog.rs","byte_start":176879,"byte_end":176886,"line_start":77,"line_end":77,"column_start":6,"column_end":13},"kind":{"Impl":{"id":44}},"from":{"krate":0,"index":1484},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/prog.rs","byte_start":179867,"byte_end":179874,"line_start":161,"line_end":161,"column_start":16,"column_end":23},"kind":{"Impl":{"id":45}},"from":{"krate":0,"index":1484},"to":{"krate":2,"index":1704}},{"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/prog.rs","byte_start":180050,"byte_end":180057,"line_start":170,"line_end":170,"column_start":21,"column_end":28},"kind":{"Impl":{"id":46}},"from":{"krate":0,"index":1484},"to":{"krate":2,"index":7636}},{"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/prog.rs","byte_start":185145,"byte_end":185149,"line_start":298,"line_end":298,"column_start":6,"column_end":10},"kind":{"Impl":{"id":47}},"from":{"krate":0,"index":1502},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/prog.rs","byte_start":187540,"byte_end":187550,"line_start":380,"line_end":380,"column_start":6,"column_end":16},"kind":{"Impl":{"id":48}},"from":{"krate":0,"index":1584},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/prog.rs","byte_start":189004,"byte_end":189013,"line_start":429,"line_end":429,"column_start":6,"column_end":15},"kind":{"Impl":{"id":49}},"from":{"krate":0,"index":1591},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/re_builder.rs","byte_start":189664,"byte_end":189676,"line_start":18,"line_end":18,"column_start":18,"column_end":30},"kind":{"Impl":{"id":50}},"from":{"krate":0,"index":1599},"to":{"krate":2,"index":2206}},{"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/re_bytes.rs","byte_start":208649,"byte_end":208654,"line_start":26,"line_end":26,"column_start":10,"column_end":15},"kind":{"Impl":{"id":51}},"from":{"krate":0,"index":1703},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/re_bytes.rs","byte_start":209525,"byte_end":209530,"line_start":59,"line_end":59,"column_start":30,"column_end":35},"kind":{"Impl":{"id":52}},"from":{"krate":2,"index":26859},"to":{"krate":2,"index":2258}},{"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/re_bytes.rs","byte_start":210324,"byte_end":210329,"line_start":79,"line_end":79,"column_start":23,"column_end":28},"kind":{"Impl":{"id":53}},"from":{"krate":0,"index":1727},"to":{"krate":2,"index":7641}},{"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/re_bytes.rs","byte_start":210506,"byte_end":210511,"line_start":86,"line_end":86,"column_start":21,"column_end":26},"kind":{"Impl":{"id":54}},"from":{"krate":0,"index":1727},"to":{"krate":2,"index":7636}},{"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/re_bytes.rs","byte_start":210816,"byte_end":210821,"line_start":97,"line_end":97,"column_start":21,"column_end":26},"kind":{"Impl":{"id":55}},"from":{"krate":0,"index":1727},"to":{"krate":2,"index":2258}},{"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/re_bytes.rs","byte_start":210905,"byte_end":210910,"line_start":103,"line_end":103,"column_start":18,"column_end":23},"kind":{"Impl":{"id":56}},"from":{"krate":0,"index":1727},"to":{"krate":2,"index":6808}},{"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/re_bytes.rs","byte_start":211121,"byte_end":211126,"line_start":113,"line_end":113,"column_start":6,"column_end":11},"kind":{"Impl":{"id":57}},"from":{"krate":0,"index":1727},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/re_bytes.rs","byte_start":227578,"byte_end":227583,"line_start":532,"line_end":532,"column_start":6,"column_end":11},"kind":{"Impl":{"id":58}},"from":{"krate":0,"index":1727},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/re_bytes.rs","byte_start":231647,"byte_end":231652,"line_start":652,"line_end":652,"column_start":6,"column_end":11},"kind":{"Impl":{"id":59}},"from":{"krate":0,"index":1727},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/re_bytes.rs","byte_start":233164,"byte_end":233171,"line_start":694,"line_end":694,"column_start":27,"column_end":34},"kind":{"Impl":{"id":60}},"from":{"krate":0,"index":637},"to":{"krate":2,"index":3653}},{"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/re_bytes.rs","byte_start":233765,"byte_end":233779,"line_start":714,"line_end":714,"column_start":27,"column_end":41},"kind":{"Impl":{"id":61}},"from":{"krate":0,"index":648},"to":{"krate":2,"index":3653}},{"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/re_bytes.rs","byte_start":234354,"byte_end":234359,"line_start":735,"line_end":735,"column_start":27,"column_end":32},"kind":{"Impl":{"id":62}},"from":{"krate":0,"index":659},"to":{"krate":2,"index":3653}},{"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/re_bytes.rs","byte_start":235371,"byte_end":235377,"line_start":770,"line_end":770,"column_start":27,"column_end":33},"kind":{"Impl":{"id":63}},"from":{"krate":0,"index":669},"to":{"krate":2,"index":3653}},{"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/re_bytes.rs","byte_start":236269,"byte_end":236281,"line_start":802,"line_end":802,"column_start":23,"column_end":35},"kind":{"Impl":{"id":64}},"from":{"krate":0,"index":679},"to":{"krate":2,"index":3653}},{"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/re_bytes.rs","byte_start":237735,"byte_end":237751,"line_start":843,"line_end":843,"column_start":6,"column_end":22},"kind":{"Impl":{"id":65}},"from":{"krate":0,"index":1732},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/re_bytes.rs","byte_start":239489,"byte_end":239497,"line_start":891,"line_end":891,"column_start":10,"column_end":18},"kind":{"Impl":{"id":66}},"from":{"krate":0,"index":695},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/re_bytes.rs","byte_start":242442,"byte_end":242450,"line_start":960,"line_end":960,"column_start":25,"column_end":33},"kind":{"Impl":{"id":67}},"from":{"krate":0,"index":695},"to":{"krate":2,"index":7636}},{"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/re_bytes.rs","byte_start":242677,"byte_end":242690,"line_start":968,"line_end":968,"column_start":29,"column_end":42},"kind":{"Impl":{"id":68}},"from":{"krate":0,"index":713},"to":{"krate":2,"index":7636}},{"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/re_bytes.rs","byte_start":244181,"byte_end":244189,"line_start":1013,"line_end":1013,"column_start":27,"column_end":35},"kind":{"Impl":{"id":69}},"from":{"krate":0,"index":695},"to":{"krate":2,"index":1780}},{"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/re_bytes.rs","byte_start":244838,"byte_end":244846,"line_start":1035,"line_end":1035,"column_start":33,"column_end":41},"kind":{"Impl":{"id":70}},"from":{"krate":0,"index":695},"to":{"krate":2,"index":1780}},{"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/re_bytes.rs","byte_start":245643,"byte_end":245660,"line_start":1059,"line_end":1059,"column_start":27,"column_end":44},"kind":{"Impl":{"id":71}},"from":{"krate":0,"index":741},"to":{"krate":2,"index":3653}},{"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/re_bytes.rs","byte_start":248035,"byte_end":248046,"line_start":1129,"line_end":1129,"column_start":50,"column_end":61},"kind":{"Impl":{"id":72}},"from":{"krate":0,"index":1739},"to":{"krate":0,"index":753}},{"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/re_bytes.rs","byte_start":248635,"byte_end":248636,"line_start":1151,"line_end":1151,"column_start":25,"column_end":26},"kind":{"Impl":{"id":73}},"from":{"krate":0,"index":770},"to":{"krate":0,"index":753}},{"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/re_bytes.rs","byte_start":249300,"byte_end":249308,"line_start":1171,"line_end":1171,"column_start":23,"column_end":31},"kind":{"Impl":{"id":74}},"from":{"krate":0,"index":773},"to":{"krate":0,"index":753}},{"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/re_trait.rs","byte_start":265134,"byte_end":265143,"line_start":14,"line_end":14,"column_start":6,"column_end":15},"kind":{"Impl":{"id":75}},"from":{"krate":0,"index":1898},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/re_trait.rs","byte_start":266697,"byte_end":266715,"line_start":59,"line_end":59,"column_start":23,"column_end":41},"kind":{"Impl":{"id":76}},"from":{"krate":0,"index":790},"to":{"krate":2,"index":3653}},{"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/re_trait.rs","byte_start":267815,"byte_end":267820,"line_start":87,"line_end":87,"column_start":30,"column_end":35},"kind":"SuperTrait","from":{"krate":2,"index":1538},"to":{"krate":0,"index":798}},{"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/re_trait.rs","byte_start":270049,"byte_end":270056,"line_start":158,"line_end":158,"column_start":13,"column_end":20},"kind":{"Impl":{"id":77}},"from":{"krate":0,"index":809},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/re_trait.rs","byte_start":270340,"byte_end":270347,"line_start":174,"line_end":174,"column_start":26,"column_end":33},"kind":{"Impl":{"id":78}},"from":{"krate":0,"index":809},"to":{"krate":2,"index":3653}},{"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/re_trait.rs","byte_start":271574,"byte_end":271588,"line_start":214,"line_end":214,"column_start":13,"column_end":27},"kind":{"Impl":{"id":79}},"from":{"krate":0,"index":826},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/re_trait.rs","byte_start":271882,"byte_end":271896,"line_start":230,"line_end":230,"column_start":26,"column_end":40},"kind":{"Impl":{"id":80}},"from":{"krate":0,"index":826},"to":{"krate":2,"index":3653}},{"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/re_unicode.rs","byte_start":273569,"byte_end":273574,"line_start":35,"line_end":35,"column_start":10,"column_end":15},"kind":{"Impl":{"id":81}},"from":{"krate":0,"index":1905},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/re_unicode.rs","byte_start":274547,"byte_end":274552,"line_start":74,"line_end":74,"column_start":30,"column_end":35},"kind":{"Impl":{"id":82}},"from":{"krate":2,"index":26859},"to":{"krate":2,"index":2258}},{"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/re_unicode.rs","byte_start":276933,"byte_end":276938,"line_start":138,"line_end":138,"column_start":23,"column_end":28},"kind":{"Impl":{"id":83}},"from":{"krate":0,"index":1929},"to":{"krate":2,"index":7641}},{"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/re_unicode.rs","byte_start":277115,"byte_end":277120,"line_start":145,"line_end":145,"column_start":21,"column_end":26},"kind":{"Impl":{"id":84}},"from":{"krate":0,"index":1929},"to":{"krate":2,"index":7636}},{"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/re_unicode.rs","byte_start":277308,"byte_end":277313,"line_start":153,"line_end":153,"column_start":21,"column_end":26},"kind":{"Impl":{"id":85}},"from":{"krate":0,"index":1929},"to":{"krate":2,"index":2258}},{"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/re_unicode.rs","byte_start":277397,"byte_end":277402,"line_start":159,"line_end":159,"column_start":18,"column_end":23},"kind":{"Impl":{"id":86}},"from":{"krate":0,"index":1929},"to":{"krate":2,"index":6808}},{"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/re_unicode.rs","byte_start":277613,"byte_end":277618,"line_start":169,"line_end":169,"column_start":6,"column_end":11},"kind":{"Impl":{"id":87}},"from":{"krate":0,"index":1929},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/re_unicode.rs","byte_start":294074,"byte_end":294079,"line_start":591,"line_end":591,"column_start":6,"column_end":11},"kind":{"Impl":{"id":88}},"from":{"krate":0,"index":1929},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/re_unicode.rs","byte_start":298133,"byte_end":298138,"line_start":711,"line_end":711,"column_start":6,"column_end":11},"kind":{"Impl":{"id":89}},"from":{"krate":0,"index":1929},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/re_unicode.rs","byte_start":299518,"byte_end":299530,"line_start":751,"line_end":751,"column_start":23,"column_end":35},"kind":{"Impl":{"id":90}},"from":{"krate":0,"index":934},"to":{"krate":2,"index":3653}},{"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/re_unicode.rs","byte_start":300129,"byte_end":300134,"line_start":775,"line_end":775,"column_start":27,"column_end":32},"kind":{"Impl":{"id":91}},"from":{"krate":0,"index":945},"to":{"krate":2,"index":3653}},{"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/re_unicode.rs","byte_start":301139,"byte_end":301145,"line_start":810,"line_end":810,"column_start":27,"column_end":33},"kind":{"Impl":{"id":92}},"from":{"krate":0,"index":955},"to":{"krate":2,"index":3653}},{"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/re_unicode.rs","byte_start":302841,"byte_end":302857,"line_start":860,"line_end":860,"column_start":6,"column_end":22},"kind":{"Impl":{"id":93}},"from":{"krate":0,"index":1934},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/re_unicode.rs","byte_start":304584,"byte_end":304592,"line_start":908,"line_end":908,"column_start":10,"column_end":18},"kind":{"Impl":{"id":94}},"from":{"krate":0,"index":970},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/re_unicode.rs","byte_start":307497,"byte_end":307505,"line_start":977,"line_end":977,"column_start":25,"column_end":33},"kind":{"Impl":{"id":95}},"from":{"krate":0,"index":970},"to":{"krate":2,"index":7636}},{"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/re_unicode.rs","byte_start":307732,"byte_end":307745,"line_start":985,"line_end":985,"column_start":29,"column_end":42},"kind":{"Impl":{"id":96}},"from":{"krate":0,"index":988},"to":{"krate":2,"index":7636}},{"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/re_unicode.rs","byte_start":308792,"byte_end":308800,"line_start":1015,"line_end":1015,"column_start":27,"column_end":35},"kind":{"Impl":{"id":97}},"from":{"krate":0,"index":970},"to":{"krate":2,"index":1780}},{"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/re_unicode.rs","byte_start":309445,"byte_end":309453,"line_start":1037,"line_end":1037,"column_start":33,"column_end":41},"kind":{"Impl":{"id":98}},"from":{"krate":0,"index":970},"to":{"krate":2,"index":1780}},{"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/re_unicode.rs","byte_start":310246,"byte_end":310263,"line_start":1061,"line_end":1061,"column_start":27,"column_end":44},"kind":{"Impl":{"id":99}},"from":{"krate":0,"index":1013},"to":{"krate":2,"index":3653}},{"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/re_unicode.rs","byte_start":310889,"byte_end":310903,"line_start":1082,"line_end":1082,"column_start":27,"column_end":41},"kind":{"Impl":{"id":100}},"from":{"krate":0,"index":1025},"to":{"krate":2,"index":3653}},{"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/re_unicode.rs","byte_start":311574,"byte_end":311581,"line_start":1103,"line_end":1103,"column_start":27,"column_end":34},"kind":{"Impl":{"id":101}},"from":{"krate":0,"index":1036},"to":{"krate":2,"index":3653}},{"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/re_unicode.rs","byte_start":313915,"byte_end":313926,"line_start":1171,"line_end":1171,"column_start":50,"column_end":61},"kind":{"Impl":{"id":102}},"from":{"krate":0,"index":1941},"to":{"krate":0,"index":1047}},{"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/re_unicode.rs","byte_start":314509,"byte_end":314510,"line_start":1193,"line_end":1193,"column_start":25,"column_end":26},"kind":{"Impl":{"id":103}},"from":{"krate":0,"index":1063},"to":{"krate":0,"index":1047}},{"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/re_unicode.rs","byte_start":315152,"byte_end":315160,"line_start":1213,"line_end":1213,"column_start":23,"column_end":31},"kind":{"Impl":{"id":104}},"from":{"krate":0,"index":1066},"to":{"krate":0,"index":1047}},{"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/sparse.rs","byte_start":316356,"byte_end":316365,"line_start":26,"line_end":26,"column_start":6,"column_end":15},"kind":{"Impl":{"id":105}},"from":{"krate":0,"index":1950},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/jacobfeldman/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.5/src/sparse.rs","byte_start":317161,"byte_end":317170,"line_start":63,"line_end":63,"column_start":16,"column_end":25},"kind":{"Impl":{"id":106}},"from":{"krate":0,"index":1950},"to":{"krate":2,"index":1704}}]}